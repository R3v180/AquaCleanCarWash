# √çNDICE DE ARCHIVOS (ESTRUCTURA REFACTORIZADA)

1. .schemas/turbo-schema-v1.json
2. README.md
3. ROADMAP.md
4. apps/client/index.html
5. apps/client/package.json
6. apps/client/src/App.tsx
7. apps/client/src/components/booking/BookingDateTimePicker.tsx
8. apps/client/src/layouts/AdminLayout.tsx
9. apps/client/src/lib/apiClient.ts
10. apps/client/src/main.tsx
11. apps/client/src/pages/admin/AdminDashboardPage.tsx
12. apps/client/src/pages/admin/AdminLoginPage.tsx
13. apps/client/src/pages/admin/EmployeesManagementPage.tsx
14. apps/client/src/pages/admin/ServicesManagementPage.tsx
15. apps/client/src/pages/public/BookingPage.tsx
16. apps/client/src/pages/public/HomePage.tsx
17. apps/client/src/pages/public/ServicesPage.tsx
18. apps/client/tsconfig.json
19. apps/client/tsconfig.node.json
20. apps/server/package.json
21. apps/server/prisma/seed.ts
22. apps/server/src/api/auth.routes.ts
23. apps/server/src/api/availability.routes.ts
24. apps/server/src/api/employees.routes.ts
25. apps/server/src/api/services.routes.ts
26. apps/server/src/lib/prisma.ts
27. apps/server/src/server.ts
28. apps/server/tsconfig.json
29. docs/PROJECT_SPECIFICATION.md
30. docs/features/01-authentication.md
31. docs/features/02-public-site.md
32. docs/features/03-booking-flow.md
33. docs/features/04-customer-panel.md
34. docs/features/05-admin-panel-core-management.md
35. docs/features/06-admin-panel-operations.md
36. docs/features/07-reviews-system.md
37. docs/features/08-marketing-monetization.md
38. docs/features/09-notifications-system.md
39. docs/features/10-external-integrations.md
40. package.json
41. packages/config/eslint-preset.js
42. packages/config/package.json
43. packages/types/package.json
44. packages/types/src/employee.schema.ts
45. packages/types/src/index.ts
46. packages/types/src/service.schema.ts
47. packages/types/src/service.ts
48. packages/types/tsconfig.json
49. tsconfig.base.json
50. tsconfig.json
51. turbo.json


# CONTENIDO DE ARCHIVOS


// ====== [1] .schemas/turbo-schema-v1.json ======
{
  "$id": "https://json.schemastore.org/turbo",
  "title": "Turborepo configuration file",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "extends": {
      "description": "A list of packages to extend the configuration from. Can be a path to a local file or a package name.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "globalDependencies": {
      "description": "A list of file glob patterns that Turborepo will use to determine if a task should be executed.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "globalEnv": {
      "description": "A list of environment variables that are used by all tasks. These variables are passed to the tasks as environment variables.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "pipeline": {
      "description": "The pipeline configuration for the Turborepo.",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "cache": {
            "description": "Whether or not to cache the task.",
            "type": "boolean"
          },
          "dependsOn": {
            "description": "A list of tasks that this task depends on.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputs": {
            "description": "A list of file glob patterns that are the outputs of the task.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "env": {
            "description": "A list of environment variables that are used by the task.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputMode": {
            "description": "The output mode of the task.",
            "type": "string",
            "enum": [
              "full",
              "hash-only",
              "new-only",
              "none"
            ]
          },
          "persistent": {
            "description": "Whether or not the task is a persistent task.",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "additionalProperties": false
}


// ====== [2] README.md ======
<!-- File: /README.md - v1.1 -->
<div align="center">
  <img src="./docs/assets/logo.png" alt="AquaClean Car Wash Logo" width="200"/>
</div>

# AquaClean Car Wash - Plataforma de Gesti√≥n y Reservas

![Versi√≥n](https://img.shields.io/badge/version-1.0.0-blue)
![Estado](https://img.shields.io/badge/status-en--desarrollo-green)
![Licencia](https://img.shields.io/badge/licencia-privada-red)

Una soluci√≥n web completa para lavaderos de coches que automatiza las reservas, optimiza la gesti√≥n de clientes y potencia el marketing digital. Este proyecto est√° dise√±ado para ser una base robusta y reutilizable para negocios del sector.

---

## üé• Demo Visual

<!-- TODO: A√±adir un GIF animado mostrando el flujo de reserva del cliente y el panel de administraci√≥n -->
<div align="center">
  *Pr√≥ximamente: Una demostraci√≥n visual del producto en acci√≥n.*
</div>

---

## ‚ú® Caracter√≠sticas Principales

| Caracter√≠stica                          | Estado         | Descripci√≥n                                                                                                                      |
| :-------------------------------------- | :------------- | :------------------------------------------------------------------------------------------------------------------------------- |
| üìÖ **Sistema de Reservas 24/7**         | ‚è≥ Pendiente   | Permite a los clientes reservar citas online en cualquier momento, seleccionando servicios y empleado de preferencia.            |
| üìä **Panel de Administraci√≥n Completo** | üü¢ En Progreso | Un centro de control para gestionar citas, servicios, horarios, clientes y valoraciones. Incluye un planning visual interactivo. |
| üì± **Dise√±o 100% Adaptativo**           | ‚è≥ Pendiente   | Experiencia de usuario impecable en cualquier dispositivo: m√≥vil, tablet y ordenador.                                            |
| üîî **Notificaciones Autom√°ticas**       | ‚è≥ Pendiente   | Confirmaciones y recordatorios por Email y WhatsApp para reducir las ausencias y mantener a todos informados.                    |
| ‚≠ê **Sistema de Valoraciones**          | ‚è≥ Pendiente   | Automatiza la solicitud de rese√±as y permite moderarlas antes de mostrarlas p√∫blicamente en la web.                              |
| üí≥ **M√∫ltiples V√≠as de Ingreso**        | ‚è≥ Pendiente   | Soporte para bonos, tarjetas regalo y suscripciones mensuales para fidelizar clientes y generar ingresos recurrentes.            |
| üîó **Integraciones Clave**              | ‚è≥ Pendiente   | Sincronizaci√≥n bidireccional con Google Calendar y pasarela de pagos segura con Stripe.                                          |

---

## üõ†Ô∏è Stack Tecnol√≥gico

| √Årea                                     | Tecnolog√≠as                                                        |
| :--------------------------------------- | :----------------------------------------------------------------- |
| **Frontend**                             | React 18, TypeScript, Vite, Mantine UI, Zustand                    |
| **Backend**                              | Node.js, Express.js, TypeScript, Prisma, Zod                       |
| **Base de Datos**                        | PostgreSQL                                                         |
| **Testing**                              | Vitest, React Testing Library                                      |
| **Herramientas de Desarrollo y Calidad** | pnpm (Monorepo), Git, GitHub, ESLint, Prettier, Husky, lint-staged |

---

## üöÄ C√≥mo Empezar (Gu√≠a para Desarrolladores)

<details>
<summary><strong>Haz clic aqu√≠ para ver las instrucciones de instalaci√≥n y ejecuci√≥n</strong></summary>

### Requisitos Previos

- Node.js (v20+)
- pnpm (v9+)
- Git
- Una instancia de PostgreSQL en ejecuci√≥n

### Pasos para la Instalaci√≥n

1.  **Clonar el repositorio:**

    ```bash
    git clone https://github.com/R3v180/AquaCleanCarWash.git
    cd AquaCleanCarWash
    ```

2.  **Instalar dependencias:**

    ```bash
    pnpm install
    ```

    _Nota: Este comando tambi√©n instalar√° y configurar√° **Husky**. A partir de ahora, se ejecutar√°n comprobaciones de calidad de c√≥digo (ESLint, Prettier) autom√°ticamente antes de cada `git commit`._

3.  **Configurar variables de entorno:**
    - Habr√° un archivo `.env.example` en la carpeta del servidor (`apps/server`).
    - C√≥pialo a un nuevo archivo llamado `.env` en la misma carpeta.
    - Rellena las variables (credenciales de la base de datos, claves de API, etc.).
      _Nota: Estos archivos se crear√°n durante el desarrollo del backend._

4.  **Ejecutar las migraciones de la base de datos:**

    ```bash
    # Ejecuta el script 'migrate:dev' solo en el workspace del servidor
    pnpm --filter server run migrate:dev
    ```

5.  **Iniciar los servidores de desarrollo:**
    ```bash
    # Este comando iniciar√° el frontend y el backend simult√°neamente
    pnpm dev
    ```

</details>

---

## üó∫Ô∏è Roadmap del Proyecto

Para ver el plan de desarrollo detallado por fases, consulta nuestro archivo [**ROADMAP.md**](./ROADMAP.md).

## üìÑ Especificaciones Completas

Toda la funcionalidad del proyecto est√° documentada en detalle en nuestra [**Especificaci√≥n de Proyecto**](./docs/PROJECT_SPECIFICATION.md).



// ====== [3] ROADMAP.md ======
<!-- File: /ROADMAP.md - v1.0 -->

# Roadmap del Proyecto AquaClean Car Wash

Este documento describe el plan de desarrollo por fases para la plataforma. El objetivo es lanzar un Producto M√≠nimo Viable (MVP) funcional y luego iterar sobre √©l a√±adiendo capas de valor en versiones posteriores.

---

## üöß Versi√≥n 1.0: MVP - Lanzamiento y Operaciones Core

**Objetivo:** Poner en marcha la funcionalidad esencial para que el negocio pueda recibir y gestionar reservas online.

- **Sitio P√∫blico B√°sico:**
  - [ ] P√°gina de Inicio (Homepage).
  - [‚úÖ] P√°gina de Servicios detallada.
  - [ ] Perfiles p√∫blicos del equipo.

- **Flujo de Reserva Completo:**
  - [‚úÖ] L√≥gica de Disponibilidad (API y Componente de Frontend).
  - [ ] Conexi√≥n del flujo (Selecci√≥n de servicio -> Calendario).
  - [ ] Formulario de datos de cliente y veh√≠culo.
  - [ ] Creaci√≥n final de la cita en la base de datos.
  - [ ] Integraci√≥n b√°sica con Stripe para pagos.

- **‚úÖ Panel de Administraci√≥n Esencial:**
  - **‚úÖ Gesti√≥n Core:** CRUD para Servicios y Empleados (Backend y Frontend).
  - [ ] **Operaciones:** Planning visual de citas (FullCalendar) con creaci√≥n manual.
  - [‚úÖ] **Autenticaci√≥n:** Login seguro para el administrador.

- **[ ] Notificaciones Cr√≠ticas (Email):**
  - [ ] Email de confirmaci√≥n de cita para el cliente.
  - [ ] Email de notificaci√≥n de nueva cita para la empresa.

---

## ‚ú® Versi√≥n 1.1: Fidelizaci√≥n y Experiencia de Cliente

**Objetivo:** Mejorar la retenci√≥n de clientes y automatizar el marketing de reputaci√≥n.

- **[ ] Panel de Cliente Completo:**
  - [ ] Registro de usuarios (Email/Google) con verificaci√≥n.
  - [ ] Login y gesti√≥n de perfil.
  - [ ] Historial de citas y opci√≥n "Reservar de Nuevo".
  - [ ] Gesti√≥n de m√∫ltiples veh√≠culos.

- **[ ] Sistema de Valoraciones y Rese√±as:**
  - [ ] Email/WhatsApp autom√°tico post-servicio para solicitar valoraci√≥n.
  - [ ] Panel de moderaci√≥n de rese√±as en el √°rea de administraci√≥n.
  - [ ] Visualizaci√≥n de rese√±as aprobadas en el sitio p√∫blico.

- **[ ] Integraci√≥n con Google Calendar:**
  - [ ] Sincronizaci√≥n bidireccional para citas y bloqueos.

---

## üöÄ Versi√≥n 1.2: Monetizaci√≥n Avanzada y Anal√≠ticas

**Objetivo:** Introducir nuevas v√≠as de ingresos y proporcionar herramientas de inteligencia de negocio.

- **[ ] M√≥dulos de Marketing y Monetizaci√≥n:**
  - [ ] Creaci√≥n y gesti√≥n de Bonos de lavados.
  - [ ] Venta de Tarjetas Regalo digitales.
  - [ ] Sistema de suscripciones mensuales (Club de Lavado).

- **[ ] Dashboard de Anal√≠ticas:**
  - [ ] Gr√°ficos con m√©tricas clave (ingresos, ocupaci√≥n, servicios populares, etc.).

- **[ ] Notificaciones Avanzadas (WhatsApp):**
  - [ ] Recordatorios de citas autom√°ticos por WhatsApp.
  - [ ] Notificaciones de nuevas citas por WhatsApp para la empresa.

---

## üí° Futuro (Ideas a Considerar)

- PWA para Empleados: Una aplicaci√≥n "instalable" para que los empleados gestionen su agenda diaria, con posibles funcionalidades offline.
- Precios Din√°micos: Configuraci√≥n de tarifas especiales para horas de alta/baja demanda.
- Tienda Online: Venta de productos de detailing directamente desde la web.
- Integraci√≥n con Software de Contabilidad: Exportaci√≥n de datos para herramientas como Factusol, Holded, etc.



// ====== [4] apps/client/index.html ======
<!-- File: /apps/client/index.html - v1.0 -->
<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AquaClean Car Wash</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


// ====== [5] apps/client/package.json ======
{
  "name": "client",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@mantine/core": "^7.10.2",
    "@mantine/dates": "^7.10.2",
    "@mantine/form": "^7.10.2",
    "@mantine/hooks": "^7.10.2",
    "@mantine/notifications": "^7.10.2",
    "axios": "^1.7.2",
    "dayjs": "^1.11.11",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.23.1",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@aquaclean/config": "workspace:*",
    "@aquaclean/types": "workspace:*",
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.57.0",
    "postcss": "^8.4.38",
    "postcss-preset-mantine": "^1.15.0",
    "postcss-simple-vars": "^7.0.1",
    "typescript": "^5.4.5",
    "vite": "^5.2.0"
  }
}


// ====== [6] apps/client/src/App.tsx ======
import { Route, Routes } from 'react-router-dom';
import { HomePage } from './pages/public/HomePage';
import { AdminLayout } from './layouts/AdminLayout';
import { AdminDashboardPage } from './pages/admin/AdminDashboardPage';
import { ServicesManagementPage } from './pages/admin/ServicesManagementPage';
import { AdminLoginPage } from './pages/admin/AdminLoginPage';
import { EmployeesManagementPage } from './pages/admin/EmployeesManagementPage';
import { ServicesPage } from './pages/public/ServicesPage';
import { BookingPage } from './pages/public/BookingPage'; // <-- L√çNEA A√ëADIDA

function App() {
  return (
    <Routes>
      {/* Rutas P√∫blicas */}
      <Route path="/" element={<HomePage />} />
      <Route path="/services" element={<ServicesPage />} />
      <Route path="/booking" element={<BookingPage />} /> {/* <-- L√çNEA A√ëADIDA */}

      {/* Ruta de Login para Admin */}
      <Route path="/admin/login" element={<AdminLoginPage />} />

      {/* Rutas de Administraci√≥n Protegidas */}
      <Route path="/admin" element={<AdminLayout />}>
        <Route index element={<AdminDashboardPage />} />
        <Route path="services" element={<ServicesManagementPage />} />
        <Route path="employees" element={<EmployeesManagementPage />} />
      </Route>
    </Routes>
  );
}

export default App;


// ====== [7] apps/client/src/components/booking/BookingDateTimePicker.tsx ======
import { useState, useEffect } from 'react';
import { DatePicker } from '@mantine/dates';
import { SimpleGrid, Button, Text, Loader, Center, Stack, Title } from '@mantine/core';
import dayjs from 'dayjs';
import apiClient from '../../lib/apiClient';

// Definimos las propiedades que este componente necesitar√°
interface BookingDateTimePickerProps {
  serviceDuration: number;
  onDateTimeChange: (dateTime: Date | null) => void;
}

export function BookingDateTimePicker({ serviceDuration, onDateTimeChange }: BookingDateTimePickerProps) {
  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());
  const [availableSlots, setAvailableSlots] = useState<string[]>([]);
  const [selectedSlot, setSelectedSlot] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Este efecto se dispara cada vez que el usuario elige una nueva fecha en el calendario
  useEffect(() => {
    if (!selectedDate) {
      setAvailableSlots([]);
      return;
    }

    const fetchAvailability = async () => {
      setLoading(true);
      setError(null);
      setSelectedSlot(null); // Reseteamos la hora seleccionada al cambiar de d√≠a

      try {
        const formattedDate = dayjs(selectedDate).format('YYYY-MM-DD');
        const response = await apiClient.get<string[]>('/availability', {
          params: {
            date: formattedDate,
            duration: serviceDuration,
          },
        });
        setAvailableSlots(response.data);
      } catch (err) {
        console.error('Error fetching availability:', err);
        setError('No se pudo cargar la disponibilidad para este d√≠a.');
      } finally {
        setLoading(false);
      }
    };

    fetchAvailability();
  }, [selectedDate, serviceDuration]);

  // Esta funci√≥n se llama cuando el usuario hace clic en un bot√≥n de hora
  const handleSlotSelect = (slot: string) => {
    setSelectedSlot(slot);
    if (selectedDate) {
      // Usamos parseInt con una base de 10 para asegurar que la conversi√≥n es correcta y siempre devuelve un n√∫mero.
      // A√±adimos un valor por defecto de 0 por si acaso, lo que satisface a TypeScript.
      const hours = parseInt(slot.split(':')[0] ?? '0', 10);
      const minutes = parseInt(slot.split(':')[1] ?? '0', 10);

      const finalDateTime = dayjs(selectedDate).hour(hours).minute(minutes).toDate();
      onDateTimeChange(finalDateTime); // Informamos al componente padre de la fecha y hora completas
    }
  };

  return (
    <Stack>
      <DatePicker
        value={selectedDate}
        onChange={setSelectedDate}
        minDate={new Date()} // No se pueden elegir d√≠as pasados
      />

      <Stack mt="lg">
        <Title order={4}>Selecciona una hora</Title>
        {loading && <Center><Loader /></Center>}
        {error && <Text c="red">{error}</Text>}
        
        {!loading && !error && availableSlots.length === 0 && (
          <Text c="dimmed">No hay huecos disponibles para este d√≠a.</Text>
        )}

        {!loading && !error && availableSlots.length > 0 && (
          <SimpleGrid cols={{ base: 3, sm: 4 }}>
            {availableSlots.map((slot) => (
              <Button
                key={slot}
                variant={selectedSlot === slot ? 'filled' : 'outline'}
                onClick={() => handleSlotSelect(slot)}
              >
                {slot}
              </Button>
            ))}
          </SimpleGrid>
        )}
      </Stack>
    </Stack>
  );
}


// ====== [8] apps/client/src/layouts/AdminLayout.tsx ======
import { Outlet, Navigate } from 'react-router-dom';

export function AdminLayout() {
  // Leemos el token de autenticaci√≥n desde localStorage.
  // Esta es la forma m√°s simple de persistir la sesi√≥n en el navegador.
  const authToken = localStorage.getItem('authToken');

  // Si no hay token, no permitimos el acceso y redirigimos al login.
  // 'replace' evita que el usuario pueda volver atr√°s en el historial del navegador.
  if (!authToken) {
    return <Navigate to="/admin/login" replace />;
  }

  // Si hay un token, mostramos el contenido protegido del panel de administraci√≥n.
  return (
    <div>
      <header style={{ backgroundColor: '#f0f0f0', padding: '1rem' }}>
        <h2>Panel de Administraci√≥n de AquaClean</h2>
        {/* M√°s adelante aqu√≠ podr√≠amos a√±adir un bot√≥n de "Cerrar Sesi√≥n" */}
      </header>
      <main style={{ padding: '1rem' }}>
        <Outlet /> {/* Aqu√≠ se renderiza el contenido (Dashboard, Servicios, etc.) */}
      </main>
    </div>
  );
}


// ====== [9] apps/client/src/lib/apiClient.ts ======
// File: /apps/client/src/lib/apiClient.ts

import axios from 'axios';

// Creamos una instancia de Axios con una configuraci√≥n base.
// Todas las llamadas que hagamos usando 'apiClient' partir√°n de esta URL.
const apiClient = axios.create({
  // La URL base de nuestra API de backend.
  // Para un proyecto en producci√≥n, esto vendr√≠a de una variable de entorno,
  // pero para el desarrollo local, esta configuraci√≥n es perfecta.
  baseURL: 'http://localhost:3001/api',

  // Opcional: un tiempo de espera de 10 segundos para las peticiones.
  timeout: 10000,

  // Opcional: encabezados por defecto que se enviar√°n con cada petici√≥n.
  headers: {
    'Content-Type': 'application/json',
  },
});

export default apiClient;


// ====== [10] apps/client/src/main.tsx ======
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { MantineProvider } from '@mantine/core';
import App from './App';

// Estilos base de Mantine
import '@mantine/core/styles.css';
// Estilos para los componentes de fechas (DatePicker, etc.) <-- L√çNEA A√ëADIDA
import '@mantine/dates/styles.css'; 

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <MantineProvider>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </MantineProvider>
  </React.StrictMode>
);


// ====== [11] apps/client/src/pages/admin/AdminDashboardPage.tsx ======
// File: /apps/client/src/pages/admin/AdminDashboardPage.tsx
export function AdminDashboardPage() {
  return <h3>Dashboard Principal</h3>;
}


// ====== [12] apps/client/src/pages/admin/AdminLoginPage.tsx ======
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Container,
  Title,
  Paper,
  TextInput,
  PasswordInput,
  Button,
  Text,
  LoadingOverlay,
  Stack,
} from '@mantine/core';
import apiClient from '../../lib/apiClient';

export function AdminLoginPage() {
  const navigate = useNavigate();
  const [email, setEmail] = useState('admin@aquaclean.com'); // Pre-rellenado para facilitar las pruebas
  const [password, setPassword] = useState('password123'); // Pre-rellenado para facilitar las pruebas
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const handleLogin = async (event: React.FormEvent) => {
    event.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const response = await apiClient.post('/auth/login', { email, password });
      
      // Aqu√≠ es donde guardaremos el token m√°s adelante (ej. en Zustand)
      console.log('Login exitoso:', response.data);
      // Por ahora, solo guardamos en localStorage para que funcione la protecci√≥n de rutas
      localStorage.setItem('authToken', response.data.token);
      
      // Redirigimos al dashboard de admin
      navigate('/admin');

    } catch (err: any) {
      console.error('Error en el login:', err);
      if (err.response && err.response.data && err.response.data.message) {
        setError(err.response.data.message);
      } else {
        setError('Ha ocurrido un error inesperado. Int√©ntalo de nuevo.');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container size={420} my={40}>
      <Title ta="center">AquaClean Admin</Title>
      <Text c="dimmed" size="sm" ta="center" mt={5}>
        Inicia sesi√≥n para acceder al panel de administraci√≥n
      </Text>

      <Paper withBorder shadow="md" p={30} mt={30} radius="md" component="form" onSubmit={handleLogin}>
        <LoadingOverlay visible={loading} zIndex={1000} overlayProps={{ radius: 'sm', blur: 2 }} />
        <Stack gap="md">
          <TextInput
            label="Email"
            placeholder="tu@email.com"
            required
            value={email}
            onChange={(event) => setEmail(event.currentTarget.value)}
          />
          <PasswordInput
            label="Contrase√±a"
            placeholder="Tu contrase√±a"
            required
            value={password}
            onChange={(event) => setPassword(event.currentTarget.value)}
          />
          {error && (
            <Text c="red" size="sm" ta="center">
              {error}
            </Text>
          )}
          <Button fullWidth mt="xl" type="submit">
            Iniciar Sesi√≥n
          </Button>
        </Stack>
      </Paper>
    </Container>
  );
}


// ====== [13] apps/client/src/pages/admin/EmployeesManagementPage.tsx ======
import { useEffect, useState } from 'react';
import {
  Table,
  Title,
  Button,
  Modal,
  TextInput,
  Textarea,
  Select,
  Group,
  Avatar,
  Text,
  Flex,
} from '@mantine/core';
import { useDisclosure } from '@mantine/hooks';
import { useForm, zodResolver } from '@mantine/form';
import apiClient from '../../lib/apiClient';
import { createEmployeeSchema } from '@aquaclean/types';

// Definimos un tipo para los datos de los empleados que recibimos de la API
interface Employee {
  id: string;
  name: string;
  email: string;
  role: string;
  imageUrl?: string;
}

export function EmployeesManagementPage() {
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [opened, { open, close }] = useDisclosure(false);

  const form = useForm({
    validate: zodResolver(createEmployeeSchema),
    initialValues: {
      name: '',
      email: '',
      role: 'EMPLOYEE',
      bio: '',
      imageUrl: '',
    },
  });

  const fetchEmployees = async () => {
    try {
      setLoading(true);
      const response = await apiClient.get<Employee[]>('/employees');
      setEmployees(response.data);
      setError(null);
    } catch (err) {
      setError('No se pudieron cargar los empleados.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchEmployees();
  }, []);

  const handleSubmit = async (values: typeof form.values) => {
    try {
      // Omitimos workSchedule ya que no lo estamos manejando en este formulario
      const dataToSend = { ...values, workSchedule: {} };
      const response = await apiClient.post<Employee>('/employees', dataToSend);
      setEmployees((current) => [...current, response.data]);
      close();
      form.reset();
    } catch (err) {
      console.error('Error al crear el empleado:', err);
      // Aqu√≠ podr√≠as a√±adir un feedback de error al usuario
    }
  };

  if (loading) return <p>Cargando empleados...</p>;
  if (error) return <p style={{ color: 'red' }}>{error}</p>;

  return (
    <div>
      <Modal opened={opened} onClose={close} title="A√±adir Nuevo Empleado" centered>
        <form onSubmit={form.onSubmit(handleSubmit)}>
          <TextInput label="Nombre Completo" placeholder="Ej: Juan P√©rez" {...form.getInputProps('name')} withAsterisk />
          <TextInput label="Email" type="email" placeholder="ej: juan.perez@email.com" {...form.getInputProps('email')} withAsterisk mt="md" />
          <Select
            label="Rol en el sistema"
            data={[
              { value: 'EMPLOYEE', label: 'Empleado' },
              { value: 'ADMIN', label: 'Administrador' },
            ]}
            {...form.getInputProps('role')}
            withAsterisk
            mt="md"
          />
          <Textarea label="Biograf√≠a (opcional)" placeholder="Breve descripci√≥n para la p√°gina p√∫blica" {...form.getInputProps('bio')} mt="md" />
          <TextInput label="URL de la Foto (opcional)" placeholder="https://ejemplo.com/foto.jpg" {...form.getInputProps('imageUrl')} mt="md" />
          <Group justify="flex-end" mt="xl">
            <Button variant="default" onClick={close}>Cancelar</Button>
            <Button type="submit">A√±adir Empleado</Button>
          </Group>
        </form>
      </Modal>

      <Group justify="space-between">
        <Title order={2}>Gesti√≥n de Empleados</Title>
        <Button onClick={open}>A√±adir Nuevo Empleado</Button>
      </Group>

      <Table mt="md" striped highlightOnHover withTableBorder>
        <Table.Thead>
          <Table.Tr>
            <Table.Th>Nombre</Table.Th>
            <Table.Th>Email</Table.Th>
            <Table.Th>Rol</Table.Th>
            <Table.Th>Acciones</Table.Th>
          </Table.Tr>
        </Table.Thead>
        <Table.Tbody>
          {employees.length > 0 ? (
            employees.map((employee) => (
              <Table.Tr key={employee.id}>
                <Table.Td>
                  <Flex align="center" gap="sm">
                    <Avatar src={employee.imageUrl} name={employee.name} radius="xl" />
                    <Text>{employee.name}</Text>
                  </Flex>
                </Table.Td>
                <Table.Td>{employee.email}</Table.Td>
                <Table.Td>{employee.role}</Table.Td>
                <Table.Td>{/* Botones de Editar/Eliminar ir√°n aqu√≠ */}</Table.Td>
              </Table.Tr>
            ))
          ) : (
            <Table.Tr>
              <Table.Td colSpan={4}>No hay empleados creados.</Table.Td>
            </Table.Tr>
          )}
        </Table.Tbody>
      </Table>
    </div>
  );
}


// ====== [14] apps/client/src/pages/admin/ServicesManagementPage.tsx ======
// File: /apps/client/src/pages/admin/ServicesManagementPage.tsx (CORREGIDO)

import { useEffect, useState } from 'react';
import { Table, Title, Button, Modal, TextInput, Textarea, NumberInput, Group } from '@mantine/core';
import { useDisclosure } from '@mantine/hooks';
import { useForm, zodResolver } from '@mantine/form';
import apiClient from '../../lib/apiClient';
import type { Service } from '@aquaclean/types';
// CORRECCI√ìN: Importamos el esquema a trav√©s del paquete de tipos compartidos
import { createServiceSchema } from '@aquaclean/types';

export function ServicesManagementPage() {
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [opened, { open, close }] = useDisclosure(false);

  const form = useForm({
    validate: zodResolver(createServiceSchema),
    initialValues: {
      name: '',
      description: '',
      duration: 0,
      prices: { standard: 0 },
      category: '',
    },
  });

  const fetchServices = async () => {
    try {
      setLoading(true);
      const response = await apiClient.get<Service[]>('/services');
      setServices(response.data);
      setError(null);
    } catch (err) {
      setError('No se pudieron cargar los servicios.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchServices();
  }, []);

  const handleSubmit = async (values: typeof form.values) => {
    try {
      const response = await apiClient.post<Service>('/services', values);
      setServices((currentServices) => [...currentServices, response.data]);
      close();
      form.reset();
    } catch (err) {
      console.error('Error al crear el servicio:', err);
    }
  };

  if (loading) return <p>Cargando servicios...</p>;
  if (error) return <p style={{ color: 'red' }}>{error}</p>;

  return (
    <div>
      <Modal opened={opened} onClose={close} title="Crear Nuevo Servicio" centered>
        <form onSubmit={form.onSubmit(handleSubmit)}>
          <TextInput label="Nombre del Servicio" placeholder="Ej: Lavado Premium" {...form.getInputProps('name')} withAsterisk />
          <Textarea label="Descripci√≥n" placeholder="Descripci√≥n detallada del servicio" {...form.getInputProps('description')} withAsterisk mt="md" />
          <NumberInput label="Duraci√≥n (minutos)" placeholder="Ej: 60" {...form.getInputProps('duration')} withAsterisk mt="md" />
          <TextInput label="Categor√≠a" placeholder="Ej: Detallado Interior" {...form.getInputProps('category')} withAsterisk mt="md" />
          <NumberInput label="Precio Est√°ndar" placeholder="Ej: 50" {...form.getInputProps('prices.standard')} withAsterisk mt="md" />
          <Group justify="flex-end" mt="xl">
            <Button variant="default" onClick={close}>Cancelar</Button>
            <Button type="submit">Crear Servicio</Button>
          </Group>
        </form>
      </Modal>

      <Group justify="space-between">
        <Title order={2}>Gesti√≥n de Servicios</Title>
        <Button onClick={open}>Crear Nuevo Servicio</Button>
      </Group>

      <Table mt="md" striped highlightOnHover withTableBorder>
        <Table.Thead>
          <Table.Tr>
            <Table.Th>Nombre</Table.Th>
            <Table.Th>Categor√≠a</Table.Th>
            <Table.Th>Duraci√≥n (min)</Table.Th>
            <Table.Th>Acciones</Table.Th>
          </Table.Tr>
        </Table.Thead>
        <Table.Tbody>
          {services.length > 0 ? (
            services.map((service) => (
              <Table.Tr key={service.id}>
                <Table.Td>{service.name}</Table.Td>
                <Table.Td>{service.category}</Table.Td>
                <Table.Td>{service.duration}</Table.Td>
                <Table.Td>{/* Botones de Editar/Eliminar ir√°n aqu√≠ */}</Table.Td>
              </Table.Tr>
            ))
          ) : (
            <Table.Tr>
              <Table.Td colSpan={4}>No hay servicios creados.</Table.Td>
            </Table.Tr>
          )}
        </Table.Tbody>
      </Table>
    </div>
  );
}


// ====== [15] apps/client/src/pages/public/BookingPage.tsx ======
import { useState } from 'react';
import { Container, Title, Text, Paper } from '@mantine/core';
import { BookingDateTimePicker } from '../../components/booking/BookingDateTimePicker';

export function BookingPage() {
  const [selectedDateTime, setSelectedDateTime] = useState<Date | null>(null);

  // Esta es la duraci√≥n del servicio que estamos probando.
  // M√°s adelante, este valor vendr√° del servicio que el cliente haya seleccionado.
  const MOCK_SERVICE_DURATION = 60; // 60 minutos

  return (
    <Container size="sm" py="xl">
      <Title order={2} ta="center">
        Realizar una Reserva
      </Title>
      
      <Paper withBorder shadow="md" p="xl" mt="xl" radius="md">
        <Title order={3} mb="lg">Paso 1: Elige Fecha y Hora</Title>
        <BookingDateTimePicker
          serviceDuration={MOCK_SERVICE_DURATION}
          onDateTimeChange={setSelectedDateTime}
        />
      </Paper>

      {/* Esta secci√≥n es solo para depurar y ver que todo funciona */}
      <Paper withBorder p="md" mt="xl" radius="md" style={{ backgroundColor: '#f0f0f0' }}>
        <Text fw={700}>Valor seleccionado (para depuraci√≥n):</Text>
        <Text>
          {selectedDateTime ? selectedDateTime.toLocaleString('es-ES') : 'Ninguna fecha y hora seleccionada'}
        </Text>
      </Paper>
    </Container>
  );
}


// ====== [16] apps/client/src/pages/public/HomePage.tsx ======
// File: /apps/client/src/pages/public/HomePage.tsx
export function HomePage() {
  return <h1>P√°gina de Inicio P√∫blica</h1>;
}


// ====== [17] apps/client/src/pages/public/ServicesPage.tsx ======
import { useEffect, useState } from 'react';
import {
  Container,
  Title,
  Text,
  Grid,
  Card,
  Button,
  SimpleGrid,
  Group,
  Badge,
} from '@mantine/core';
import apiClient from '../../lib/apiClient';
import type { Service } from '@aquaclean/types';

export function ServicesPage() {
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchServices = async () => {
      try {
        setLoading(true);
        const response = await apiClient.get<Service[]>('/services');
        setServices(response.data);
      } catch (err) {
        setError('No se pudieron cargar los servicios. Por favor, int√©ntalo m√°s tarde.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchServices();
  }, []);

  if (loading) {
    return <Container><Text>Cargando servicios...</Text></Container>;
  }

  if (error) {
    return <Container><Text c="red">{error}</Text></Container>;
  }

  return (
    <Container py="xl">
      <Title order={2} ta="center" mb="lg">
        Nuestros Servicios
      </Title>
      <Text ta="center" c="dimmed" mb="xl">
        Elige el tratamiento perfecto para tu veh√≠culo. Ofrecemos desde lavados r√°pidos hasta detallados completos con la m√°xima calidad.
      </Text>

      <SimpleGrid cols={{ base: 1, sm: 2, lg: 3 }} spacing="lg">
        {services.map((service) => (
          <Card shadow="sm" padding="lg" radius="md" withBorder key={service.id}>
            <Group justify="space-between" mt="md" mb="xs">
              <Text fw={500}>{service.name}</Text>
              <Badge color="pink">{service.category}</Badge>
            </Group>

            <Text size="sm" c="dimmed" style={{ minHeight: 60 }}>
              {service.description.substring(0, 100)}...
            </Text>
            
            <Text size="sm" c="dimmed" mt="sm">
              Duraci√≥n estimada: {service.duration} min.
            </Text>

            <Button color="blue" fullWidth mt="md" radius="md">
              Reservar Ahora
            </Button>
          </Card>
        ))}
      </SimpleGrid>
    </Container>
  );
}


// ====== [18] apps/client/tsconfig.json ======
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "plugins": [{ "name": "typescript-plugin-css-modules" }]
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}



// ====== [19] apps/client/tsconfig.node.json ======
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "noEmit": false
  },
  "include": ["vite.config.ts"]
}


// ====== [20] apps/server/package.json ======
{
  "name": "server",
  "version": "1.0.0",
  "private": true,
  "main": "dist/server.js",
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only --exit-child src/server.ts",
    "build": "tsc",
    "start": "node dist/server.js",
    "lint": "eslint . --ext .ts",
    "migrate:dev": "prisma migrate dev --schema=./prisma/schema.prisma",
    "migrate:deploy": "prisma migrate deploy --schema=./prisma/schema.prisma",
    "prisma:generate": "prisma generate --schema=./prisma/schema.prisma",
    "prisma:studio": "prisma studio --schema=./prisma/schema.prisma",
    "prisma:seed": "ts-node prisma/seed.ts"
  },
  "dependencies": {
    "@prisma/client": "^5.14.0",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dayjs": "^1.11.11",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.2",
    "nodemailer": "^6.9.13",
    "zod": ">=3.0.0"
  },
  "devDependencies": {
    "@aquaclean/config": "workspace:*",
    "@aquaclean/types": "workspace:*",
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^20.12.12",
    "@types/nodemailer": "^6.4.15",
    "eslint": "^8.57.0",
    "prisma": "^5.14.0",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.4.5"
  }
}


// ====== [21] apps/server/prisma/seed.ts ======
import { PrismaClient, UserRole } from '@prisma/client';
import { hash } from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('Starting database seed...');

  // --- 1. Seed del Usuario Administrador ---
  const adminEmail = 'admin@aquaclean.com';
  const adminPassword = 'password123';

  const adminUser = await prisma.user.findUnique({ where: { email: adminEmail } });
  if (!adminUser) {
    const hashedPassword = await hash(adminPassword, 12);
    await prisma.user.create({
      data: {
        email: adminEmail,
        name: 'Admin User',
        passwordHash: hashedPassword,
        role: UserRole.ADMIN,
        emailVerified: new Date(),
      },
    });
    console.log(`‚úÖ Admin user created successfully: ${adminEmail}`);
  } else {
    console.log('Admin user already exists. Skipping creation.');
  }

  // --- 2. Seed de la Configuraci√≥n del Negocio ---
  const businessSettings = await prisma.businessSettings.findUnique({ where: { singleton: 'SINGLETON' } });
  const defaultWeeklySchedule = {
    monday: { open: '09:00', close: '19:00' },
    tuesday: { open: '09:00', close: '19:00' },
    wednesday: { open: '09:00', close: '19:00' },
    thursday: { open: '09:00', close: '19:00' },
    friday: { open: '09:00', close: '19:00' },
    saturday: { open: '10:00', close: '14:00' },
    sunday: null,
  };

  if (!businessSettings) {
    await prisma.businessSettings.create({
      data: {
        singleton: 'SINGLETON', // <-- CAMPO A√ëADIDO Y CORREGIDO
        weeklySchedule: defaultWeeklySchedule,
      },
    });
    console.log('‚úÖ Default business settings created.');
  } else {
    await prisma.businessSettings.update({
      where: { singleton: 'SINGLETON' },
      data: { weeklySchedule: defaultWeeklySchedule },
    });
    console.log('‚úÖ Business settings updated to default values.');
  }

  // --- 3. Seed del Empleado de Prueba ---
  const employeeEmail = 'employee@aquaclean.com';
  const testEmployee = await prisma.employee.findUnique({ where: { email: employeeEmail } });
  const employeeWorkSchedule = {
    monday: [{ start: '09:00', end: '13:00' }, { start: '14:00', end: '17:00' }],
    tuesday: [{ start: '09:00', end: '13:00' }, { start: '14:00', end: '17:00' }],
    wednesday: [{ start: '09:00', end: '13:00' }, { start: '14:00', end: '17:00' }],
    thursday: [{ start: '09:00', end: '13:00' }, { start: '14:00', end: '17:00' }],
    friday: [{ start: '09:00', end: '13:00' }, { start: '14:00', end: '17:00' }],
    saturday: [{ start: '10:00', end: '14:00' }],
  };

  if (!testEmployee) {
    await prisma.employee.create({
      data: {
        email: employeeEmail,
        name: 'Juan Empleado',
        role: UserRole.EMPLOYEE,
        workSchedule: employeeWorkSchedule,
      },
    });
    console.log(`‚úÖ Test employee created successfully: ${employeeEmail}`);
  } else {
    await prisma.employee.update({
        where: { email: employeeEmail },
        data: { workSchedule: employeeWorkSchedule }
    });
    console.log('‚úÖ Test employee updated with default work schedule.');
  }


  console.log('Database seed finished.');
}

main()
  .catch((e) => {
    console.error('An error occurred during seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });


// ====== [22] apps/server/src/api/auth.routes.ts ======
import { Router } from 'express';
import { compare } from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { z } from 'zod';
import prisma from '../lib/prisma';
import { UserRole } from '@prisma/client';

const router = Router();

// Esquema de validaci√≥n para los datos del login
const loginSchema = z.object({
  email: z.string().email('El formato del email no es v√°lido.'),
  password: z.string().min(1, 'La contrase√±a es requerida.'),
});

router.post('/login', async (req, res) => {
  try {
    // 1. Validar los datos de entrada
    const { email, password } = loginSchema.parse(req.body);

    // 2. Buscar al usuario administrador en la base de datos
    const adminUser = await prisma.user.findUnique({
      where: { email },
    });

    // 3. Verificar si el usuario existe y si es un administrador
    if (!adminUser || adminUser.role !== UserRole.ADMIN) {
      return res.status(401).json({ message: 'Credenciales inv√°lidas.' });
    }

    // 4. Comparar la contrase√±a enviada con el hash guardado
    const isPasswordValid = await compare(password, adminUser.passwordHash!);
    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Credenciales inv√°lidas.' });
    }

    // 5. Generar el Token JWT
    const jwtSecret = process.env.JWT_SECRET;
    if (!jwtSecret) {
      console.error('Error: La variable de entorno JWT_SECRET no est√° definida.');
      return res.status(500).json({ message: 'Error interno del servidor.' });
    }

    const token = jwt.sign(
      {
        userId: adminUser.id,
        email: adminUser.email,
        role: adminUser.role,
      },
      jwtSecret,
      { expiresIn: '1d' } // El token expirar√° en 1 d√≠a
    );

    // 6. Enviar el token al cliente
    res.status(200).json({
      message: 'Login exitoso.',
      token,
      user: {
        id: adminUser.id,
        name: adminUser.name,
        email: adminUser.email,
        role: adminUser.role,
      },
    });
  } catch (error) {
    console.error('Error en el login:', error);
    // Si el error es de validaci√≥n de Zod, enviamos una respuesta m√°s espec√≠fica
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: 'Datos de entrada inv√°lidos.', errors: error.issues });
    }
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

export default router;


// ====== [23] apps/server/src/api/availability.routes.ts ======
import { Router } from 'express';
import { z } from 'zod';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import prisma from '../lib/prisma';

dayjs.extend(utc);

const router = Router();

const availabilityQuerySchema = z.object({
  date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, 'El formato de fecha debe ser YYYY-MM-DD'),
  duration: z.string().regex(/^\d+$/).transform(Number),
});

router.get('/', async (req, res) => {
  try {
    const validation = availabilityQuerySchema.safeParse(req.query);
    if (!validation.success) {
      return res.status(400).json({ message: 'Par√°metros inv√°lidos.', errors: validation.error.issues });
    }
    const { date, duration } = validation.data;
    const selectedDate = dayjs.utc(date);
    const dayOfWeek = selectedDate.format('dddd').toLowerCase();

    const settings = await prisma.businessSettings.findUnique({
      where: { singleton: 'SINGLETON' },
    });

    if (!settings) {
      // Este es el error que ve√≠as. Ahora lo devolvemos con un 404 para ser m√°s claros.
      return res.status(404).json({ message: 'La configuraci√≥n del negocio no ha sido establecida.' });
    }

    const weeklySchedule = settings.weeklySchedule as any;
    const businessDayHours = weeklySchedule[dayOfWeek];

    if (!businessDayHours || !businessDayHours.open || !businessDayHours.close) {
      return res.status(200).json([]);
    }

    const employees = await prisma.employee.findMany({
      where: { workSchedule: { not: 'null' } },
    });

    const appointments = await prisma.appointment.findMany({
      where: {
        startTime: {
          gte: selectedDate.startOf('day').toDate(),
          lte: selectedDate.endOf('day').toDate(),
        },
      },
    });

    const openingTime = parseInt(businessDayHours.open.split(':')[0]);
    const closingTime = parseInt(businessDayHours.close.split(':')[0]);
    const slotInterval = 15;

    const availableSlots: string[] = [];
    let currentTime = selectedDate.hour(openingTime).minute(0).second(0);
    const endOfDay = selectedDate.hour(closingTime).minute(0).second(0);

    while (currentTime.isBefore(endOfDay)) {
      const slotStartTime = currentTime;
      const slotEndTime = currentTime.add(duration, 'minutes');

      if (slotEndTime.isAfter(endOfDay)) {
        break;
      }

      const isWithinEmployeeHours = employees.some(employee => {
        const schedule = employee.workSchedule as any;
        const daySchedule = schedule[dayOfWeek] as { start: string, end: string }[] | undefined;
        if (!daySchedule) return false;

        return daySchedule.some(shift => {
          const shiftStart = dayjs.utc(`${date}T${shift.start}`);
          const shiftEnd = dayjs.utc(`${date}T${shift.end}`);
          return !slotStartTime.isBefore(shiftStart) && !slotEndTime.isAfter(shiftEnd);
        });
      });

      if (!isWithinEmployeeHours) {
        currentTime = currentTime.add(slotInterval, 'minutes');
        continue;
      }

      // --- L√çNEA CORREGIDA ---
      // Esta es la l√≥gica correcta de solapamiento.
      const isOverlapping = appointments.some(appointment => {
        const aptStart = dayjs(appointment.startTime);
        const aptEnd = dayjs(appointment.endTime);
        return slotStartTime.isBefore(aptEnd) && slotEndTime.isAfter(aptStart);
      });
      // --- FIN DE LA CORRECCI√ìN ---

      if (!isOverlapping) {
        availableSlots.push(slotStartTime.format('HH:mm'));
      }

      currentTime = currentTime.add(slotInterval, 'minutes');
    }

    res.status(200).json(availableSlots);

  } catch (error) {
    console.error('Error al calcular la disponibilidad:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

export default router;


// ====== [24] apps/server/src/api/employees.routes.ts ======
// File: /apps/server/src/api/employees.routes.ts (CORREGIDO)

import { Router } from 'express';
import prisma from '../lib/prisma';
import { createEmployeeSchema } from '@aquaclean/types'; // <-- IMPORTACI√ìN CORREGIDA
import { ZodError } from 'zod';
import { Prisma } from '@prisma/client';

const router = Router();

// --- OBTENER TODOS LOS EMPLEADOS ---
router.get('/', async (req, res) => {
  try {
    const employees = await prisma.employee.findMany();
    res.status(200).json(employees);
  } catch (error) {
    console.error('Error al obtener los empleados:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

// --- OBTENER UN EMPLEADO POR SU ID ---
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const employee = await prisma.employee.findUnique({
      where: { id },
    });

    if (!employee) {
      return res.status(404).json({ message: 'Empleado no encontrado.' });
    }

    res.status(200).json(employee);
  } catch (error) {
    console.error('Error al obtener el empleado:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

// --- CREAR UN NUEVO EMPLEADO ---
router.post('/', async (req, res) => {
  try {
    const validatedData = createEmployeeSchema.parse(req.body);

    const newEmployee = await prisma.employee.create({
      data: {
        ...validatedData,
        workSchedule: validatedData.workSchedule as Prisma.JsonObject,
      },
    });

    res.status(201).json(newEmployee);
  } catch (error) {
    if (error instanceof ZodError) {
      return res.status(400).json({ message: 'Datos de entrada inv√°lidos.', errors: error.issues });
    }
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === 'P2002') {
        return res.status(409).json({
          message: 'Conflicto: ya existe un empleado con ese email.',
          field: (error.meta?.target as string[])?.[0],
        });
      }
    }
    console.error('Error al crear el empleado:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

// --- ACTUALIZAR UN EMPLEADO EXISTENTE ---
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updateSchema = createEmployeeSchema.partial();
    const validatedData = updateSchema.parse(req.body);
    const { workSchedule, ...restOfData } = validatedData;

    const updatedEmployee = await prisma.employee.update({
      where: { id },
      data: {
        ...restOfData,
        ...(workSchedule && {
          workSchedule: workSchedule as Prisma.JsonObject,
        }),
      },
    });

    res.status(200).json(updatedEmployee);
  } catch (error) {
    if (error instanceof ZodError) {
      return res.status(400).json({ message: 'Datos de entrada inv√°lidos.', errors: error.issues });
    }
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === 'P2002') {
        return res.status(409).json({ message: 'Conflicto: ya existe un empleado con ese email.', field: 'email' });
      }
      if (error.code === 'P2025') {
        return res.status(404).json({ message: 'Empleado no encontrado.' });
      }
    }
    console.error('Error al actualizar el empleado:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

// --- ELIMINAR UN EMPLEADO ---
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    await prisma.employee.delete({
      where: { id },
    });
    res.status(204).send();
  } catch (error) {
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === 'P2025') {
        return res.status(404).json({ message: 'Empleado no encontrado.' });
      }
    }
    console.error('Error al eliminar el empleado:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

export default router;


// ====== [25] apps/server/src/api/services.routes.ts ======
// File: /apps/server/src/api/services.routes.ts (CORREGIDO)

import { Router } from 'express';
import prisma from '../lib/prisma';
import { createServiceSchema } from '@aquaclean/types'; // <-- IMPORTACI√ìN CORREGIDA
import { ZodError } from 'zod';
import { Prisma } from '@prisma/client';

const router = Router();

// --- OBTENER TODOS LOS SERVICIOS ---
router.get('/', async (req, res) => {
  try {
    const services = await prisma.service.findMany();
    res.status(200).json(services);
  } catch (error) {
    console.error('Error al obtener los servicios:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

// --- OBTENER UN SERVICIO POR SU ID ---
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const service = await prisma.service.findUnique({
      where: { id },
    });

    if (!service) {
      return res.status(404).json({ message: 'Servicio no encontrado.' });
    }

    res.status(200).json(service);
  } catch (error) {
    console.error('Error al obtener el servicio:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

// --- CREAR UN NUEVO SERVICIO ---
router.post('/', async (req, res) => {
  try {
    const validatedData = createServiceSchema.parse(req.body);
    const newService = await prisma.service.create({
      data: validatedData,
    });
    res.status(201).json(newService);
  } catch (error) {
    if (error instanceof ZodError) {
      return res.status(400).json({ message: 'Datos de entrada inv√°lidos.', errors: error.issues });
    }
    console.error('Error al crear el servicio:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

// --- ACTUALIZAR UN SERVICIO EXISTENTE ---
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updateSchema = createServiceSchema.partial();
    const validatedData = updateSchema.parse(req.body);

    const updatedService = await prisma.service.update({
      where: { id },
      data: validatedData,
    });

    res.status(200).json(updatedService);
  } catch (error) {
    if (error instanceof ZodError) {
      return res.status(400).json({ message: 'Datos de entrada inv√°lidos.', errors: error.issues });
    }
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === 'P2025') {
        return res.status(404).json({ message: 'Servicio no encontrado.' });
      }
    }
    console.error('Error al actualizar el servicio:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

// --- ELIMINAR UN SERVICIO ---
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    await prisma.service.delete({
      where: { id },
    });
    res.status(204).send();
  } catch (error) {
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === 'P2025') {
        return res.status(404).json({ message: 'Servicio no encontrado.' });
      }
    }
    console.error('Error al eliminar el servicio:', error);
    res.status(500).json({ message: 'Error interno del servidor.' });
  }
});

export default router;


// ====== [26] apps/server/src/lib/prisma.ts ======
// File: /apps/server/src/lib/prisma.ts

import { PrismaClient } from '@prisma/client';

// Se recomienda instanciar PrismaClient una sola vez en tu aplicaci√≥n.
// Esto evita agotar el n√∫mero de conexiones a la base de datos.
// https://www.prisma.io/docs/guides/performance-and-optimization/connection-management#prismaclient-in-long-running-applications

const prisma = new PrismaClient();

export default prisma;


// ====== [27] apps/server/src/server.ts ======
import express, { Request, Response } from 'express';
import cors from 'cors';
import dotenv from 'dotenv';

// Importamos nuestros enrutadores
import servicesRouter from './api/services.routes';
import employeesRouter from './api/employees.routes';
import authRouter from './api/auth.routes';
import availabilityRouter from './api/availability.routes'; // <-- IMPORTANTE

// Cargar variables de entorno
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middlewares b√°sicos
app.use(cors({ origin: process.env.CORS_ALLOWED_ORIGIN || 'http://localhost:5173' }));
app.use(express.json());

// --- RUTAS DE LA API ---
app.use('/api/auth', authRouter);
app.use('/api/services', servicesRouter);
app.use('/api/employees', employeesRouter);
app.use('/api/availability', availabilityRouter); // <-- IMPORTANTE

// Ruta de prueba para verificar que el servidor funciona
app.get('/api', (req: Request, res: Response) => {
  res.json({ message: 'üëã Hello from the AquaClean API!' });
});

// Iniciar el servidor
app.listen(PORT, () => {
  console.log(`üöÄ Server is running on http://localhost:${PORT}`);
});


// ====== [28] apps/server/tsconfig.json ======
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "dist",
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "noEmit": false
  },
  "include": ["src/**/*.ts", "prisma/**/*.ts"],
  "exclude": ["node_modules", "dist"]
}


// ====== [29] docs/PROJECT_SPECIFICATION.md ======
<!-- File: /docs/PROJECT_SPECIFICATION.md - v1.1 -->

# Propuesta y Especificaci√≥n del Proyecto: AquaClean Car Wash

## 1. Visi√≥n del Proyecto

Construir una aplicaci√≥n web a medida de alto rendimiento que act√∫e como el motor central del negocio. La plataforma digitalizar√° por completo la experiencia del cliente, desde la reserva hasta la valoraci√≥n, y proporcionar√° al personal herramientas de gesti√≥n avanzadas para optimizar las operaciones, automatizar el marketing y potenciar el crecimiento.

## 2. Arquitectura Tecnol√≥gica

El proyecto se construir√° sobre un stack tecnol√≥gico moderno, robusto y escalable, garantizando un desarrollo eficiente y un producto final de m√°xima calidad.

| √Årea                                     | Tecnolog√≠as                                                    |
| :--------------------------------------- | :------------------------------------------------------------- |
| **Lenguaje Principal**                   | **TypeScript**                                                 |
| **Frontend**                             | React 18, Vite, Mantine UI                                     |
| **Gesti√≥n de Estado (Frontend)**         | Zustand                                                        |
| **Backend**                              | Node.js, Express.js, Zod                                       |
| **ORM y Base de Datos**                  | Prisma, PostgreSQL                                             |
| **Testing**                              | Vitest, React Testing Library                                  |
| **Herramientas de Desarrollo y Calidad** | pnpm Monorepo, Turborepo, ESLint, Prettier, Husky, lint-staged |

## 3. Desglose Detallado de Funcionalidades

Esta secci√≥n act√∫a como un √≠ndice hacia los documentos de especificaci√≥n detallada para cada m√≥dulo del sistema.

- **Sistema de Autenticaci√≥n**
  - Flujos de registro, login (email/Google), verificaci√≥n y recuperaci√≥n de contrase√±a.
  - **[Ver especificaciones detalladas en `01-authentication.md`](./features/01-authentication.md)**

- **Sitio P√∫blico y Presentaci√≥n**
  - Detalle de las secciones p√∫blicas (Inicio, Servicios, Equipo, Valoraciones, Tarjetas Regalo).
  - **[Ver especificaciones detalladas en `02-public-site.md`](./features/02-public-site.md)**

- **Flujo de Reserva del Cliente**
  - El paso a paso detallado del proceso de reserva online.
  - **[Ver especificaciones detalladas en `03-booking-flow.md`](./features/03-booking-flow.md)**

- **Panel de Cliente**
  - Funcionalidades del √°rea de cliente (Mis Citas, Mis Veh√≠culos, Bonos, Perfil).
  - **[Ver especificaciones detalladas en `04-customer-panel.md`](./features/04-customer-panel.md)**

- **Panel de Administraci√≥n: Gesti√≥n Base**
  - Configuraci√≥n de Servicios, Empleados, Horarios y Clientes.
  - **[Ver especificaciones detalladas en `05-admin-panel-core-management.md`](./features/05-admin-panel-core-management.md)**

- **Panel de Administraci√≥n: Operaciones Diarias**
  - Herramientas del d√≠a a d√≠a (Dashboard, Planning Visual, Gesti√≥n de Citas).
  - **[Ver especificaciones detalladas en `06-admin-panel-operations.md`](./features/06-admin-panel-operations.md)**

- **Sistema de Valoraciones**
  - Flujo de solicitud de valoraciones y panel de moderaci√≥n de rese√±as.
  - **[Ver especificaciones detalladas en `07-reviews-system.md`](./features/07-reviews-system.md)**

- **M√≥dulos de Marketing y Monetizaci√≥n**
  - Gesti√≥n de bonos, programas de fidelizaci√≥n y suscripciones.
  - **[Ver especificaciones detalladas en `08-marketing-monetization.md`](./features/08-marketing-monetization.md)**

- **Sistema de Notificaciones**
  - Detalle de todos los emails y mensajes de WhatsApp autom√°ticos.
  - **[Ver especificaciones detalladas en `09-notifications-system.md`](./features/09-notifications-system.md)**

- **Integraciones Externas**
  - Especificaciones de la sincronizaci√≥n con Google Calendar y la pasarela de pago Stripe.
  - **[Ver especificaciones detalladas en `10-external-integrations.md`](./features/10-external-integrations.md)**



// ====== [30] docs/features/01-authentication.md ======
<!-- File: /docs/features/01-authentication.md - v1.0 -->
````markdown
# 1. Sistema de Autenticaci√≥n

## 1.1. Objetivo

Permitir a los usuarios crear una cuenta segura y acceder a su panel personal. Ofrecer m√©todos de registro modernos y de baja fricci√≥n para maximizar la conversi√≥n de visitante a cliente registrado, incluyendo el registro cl√°sico por email y el inicio de sesi√≥n social con Google.

## 1.2. Flujos de Usuario (User Stories)

### Registro con Email y Contrase√±a

1.  Como nuevo usuario, quiero poder hacer clic en "Registrarse".
2.  Quiero ver un formulario que me pida Nombre, Email y Contrase√±a.
3.  La contrase√±a debe tener un indicador de seguridad visual (ej: m√≠nimo 8 caracteres, una may√∫scula, un n√∫mero).
4.  Al enviar el formulario, quiero recibir un email para verificar que mi correo es real.
5.  La aplicaci√≥n debe informarme de que revise mi bandeja de entrada para completar el registro.
6.  Al hacer clic en el enlace de verificaci√≥n del email, mi cuenta se activar√° y ser√© redirigido a la p√°gina de "Inicio de Sesi√≥n".

### Registro / Inicio de Sesi√≥n con Google (OAuth)

1.  Como usuario, quiero ver un bot√≥n "Continuar con Google" en las p√°ginas de registro e inicio de sesi√≥n.
2.  Al hacer clic, quiero que se abra el pop-up de autenticaci√≥n de Google.
3.  Tras autorizar los permisos, si es mi primera vez, se debe crear una cuenta en el sistema autom√°ticamente con mi nombre y email de Google.
4.  Si ya tengo una cuenta asociada a ese email, se debe iniciar sesi√≥n.
5.  En ambos casos, debo ser redirigido a mi "Panel de Cliente" (`/dashboard`).

### Inicio de Sesi√≥n Cl√°sico

1.  Como usuario registrado, quiero poder introducir mi email y contrase√±a para acceder.
2.  Quiero una opci√≥n de "Recordar sesi√≥n" (checkbox) para no tener que iniciar sesi√≥n cada vez.
3.  Si introduzco credenciales incorrectas, quiero ver un mensaje de error claro.
4.  Quiero un enlace de "¬øHas olvidado tu contrase√±a?" por si no la recuerdo.

### Recuperaci√≥n de Contrase√±a

1.  Al hacer clic en "¬øHas olvidado tu contrase√±a?", quiero ir a una p√°gina donde introduzco mi direcci√≥n de email.
2.  Tras enviar mi email, quiero recibir un correo con un enlace seguro y de un solo uso para establecer una nueva contrase√±a.
3.  Al hacer clic en el enlace, quiero ser llevado a una p√°gina donde pueda introducir y confirmar mi nueva contrase√±a.
4.  Tras cambiarla con √©xito, quiero ser redirigido a la p√°gina de "Inicio de Sesi√≥n".

## 1.3. Componentes de UI (Vistas Necesarias)

- P√°gina de Registro: `/auth/register`
- P√°gina de Inicio de Sesi√≥n: `/auth/login`
- P√°gina de "Verifica tu Email": `/auth/verify-request` (P√°gina informativa que se muestra tras el registro).
- P√°gina de "Contrase√±a Olvidada": `/auth/forgot-password`
- P√°gina para "Restablecer Contrase√±a": `/auth/reset-password?token=[TOKEN]`

## 1.4. Modelo de Datos (Esquema Prisma)

```prisma
// Este esquema define la estructura de la base de datos para la autenticaci√≥n.
// Sigue el est√°ndar de NextAuth.js/Auth.js para m√°xima compatibilidad.

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?   // Hash de la contrase√±a para usuarios de email/pass
  image         String?
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
  // ... otros campos relacionados con el cliente
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String  // ej. "google"
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
```
````

## 1.5. Endpoints de la API

- `POST /api/auth/register`: Recibe `{ name, email, password }`. Crea el usuario (inactivo), genera un token de verificaci√≥n y env√≠a el email.
- `POST /api/auth/login`: Recibe `{ email, password }`. Valida las credenciales y devuelve una sesi√≥n (cookie JWT).
- `GET /api/auth/verify-email?token=[TOKEN]`: Valida el token de email, marca `emailVerified` en la base de datos y activa la cuenta.
- `POST /api/auth/forgot-password`: Recibe `{ email }`. Genera un token de reseteo y lo env√≠a por email.
- `POST /api/auth/reset-password`: Recibe `{ token, newPassword }`. Valida el token y actualiza el `passwordHash` del usuario.
- `GET /api/auth/providers/google`: Redirige al usuario a la p√°gina de consentimiento de Google (inicia el flujo OAuth).
- `GET /api/auth/providers/google/callback`: Endpoint al que Google redirige tras la autorizaci√≥n. Procesa los datos del usuario, crea/loguea al usuario y establece la sesi√≥n.
- `POST /api/auth/logout`: Cierra la sesi√≥n del usuario.

```

```




// ====== [31] docs/features/02-public-site.md ======
<!-- File: /docs/features/02-public-site.md - v1.0 -->

# 2. Sitio P√∫blico y Presentaci√≥n

## 2.1. Objetivo

Construir la cara visible del negocio. Esta √°rea debe ser visualmente atractiva, profesional, r√°pida y estar optimizada para convertir visitantes en clientes. Cada p√°gina tiene el prop√≥sito de informar, generar confianza y guiar al usuario hacia la acci√≥n principal: la reserva de una cita.

## 2.2. Desglose de P√°ginas y Secciones

### P√°gina de Inicio (`/`)

**Prop√≥sito:** La primera impresi√≥n. Debe captar la atenci√≥n del usuario en segundos y comunicar el valor y la calidad del servicio.

**Componentes Clave:**

- **Secci√≥n "Hero" (Principal):**
  - Un banner de alta calidad (imagen o v√≠deo) mostrando un coche reluciente.
  - Titular principal claro y potente (ej: "La Excelencia en Cada Detalle").
  - Subt√≠tulo que resuma la propuesta de valor.
  - Bot√≥n de Llamada a la Acci√≥n (CTA) principal y muy visible: "Reservar Cita Ahora", que dirige al flujo de reserva.
- **Secci√≥n de Servicios Destacados:**
  - Una cuadr√≠cula o carrusel mostrando 3-4 de los servicios m√°s populares.
  - Cada servicio mostrar√°: nombre, imagen, precio base y un bot√≥n "Ver Detalles" que lleva a la p√°gina de Servicios.
- **Secci√≥n "Por Qu√© Elegirnos":**
  - Iconos y texto breve resaltando 3-4 puntos fuertes: Productos Ecol√≥gicos, T√©cnicos Certificados, Satisfacci√≥n Garantizada, etc.
- **Secci√≥n de Testimonios:**
  - Un carrusel con 3-5 de las mejores valoraciones de clientes.
  - Cada testimonio mostrar√°: nombre del cliente, servicio recibido, calificaci√≥n (estrellas) y un extracto del comentario.
  - Un bot√≥n "Leer todas las valoraciones" que enlaza a la p√°gina `/reviews`.
- **Footer (Pie de P√°gina):**
  - Informaci√≥n de contacto (tel√©fono, email), direcci√≥n, mapa de ubicaci√≥n (Google Maps embed), horario de apertura y enlaces a redes sociales.

**Datos Requeridos (API):**

- `GET /api/services?featured=true`
- `GET /api/reviews?limit=5&featured=true`

### P√°gina de Servicios (`/services`)

**Estado: Implementado.** La p√°gina p√∫blica que lista todos los servicios disponibles desde la API ya est√° funcional.

**Prop√≥sito:** Actuar como un cat√°logo digital detallado que informa y persuade al cliente sobre la oferta del lavadero.

**Componentes Clave:**

- **Listado Completo de Servicios:**
  - Una cuadr√≠cula con todos los servicios disponibles.
  - Cada "tarjeta" de servicio incluir√°: imagen, nombre, descripci√≥n corta, duraci√≥n estimada y precio inicial ("Desde X ‚Ç¨").
- **Vista Detallada del Servicio (`/services/[slug]` o en un Modal):**
  - Al hacer clic en un servicio, se mostrar√°:
    - Galer√≠a de im√°genes "Antes y Despu√©s".
    - Descripci√≥n completa y detallada del proceso.
    - Lista de "Qu√© incluye" punto por punto.
    - Tabla de precios por tipo de veh√≠culo (Peque√±o, Mediano, Grande/SUV).
    - Un bot√≥n CTA destacado: "Reservar este Servicio".

**Datos Requeridos (API):**

- ‚úÖ `GET /api/services`
- `GET /api/services/[id]`

### P√°gina "Nuestro Equipo" (`/team`)

**Prop√≥sito:** Humanizar la marca, generar confianza y permitir que los clientes elijan a su t√©cnico preferido bas√°ndose en su experiencia.

**Componentes Clave:**

- **Perfiles de Empleados:**
  - Una secci√≥n para cada t√©cnico.
  - Cada perfil incluir√°:
    - Foto profesional y de alta calidad.
    - Nombre y Apellido.
    - Cargo o Especialidad (ej: "Especialista en Detallado y Protecci√≥n Cer√°mica").
    - Biograf√≠a corta destacando su experiencia y pasi√≥n por los coches.
    - Calificaci√≥n media obtenida de las valoraciones de los clientes.
    - Bot√≥n CTA: "Ver Disponibilidad de [Nombre]", que inicia el flujo de reserva con ese empleado ya seleccionado.

**Datos Requeridos (API):**

- `GET /api/employees` (debe devolver el perfil p√∫blico, incluyendo la valoraci√≥n media).

### P√°gina de Valoraciones de Clientes (`/reviews`)

**Prop√≥sito:** Proveer prueba social masiva y transparente, mostrando las experiencias de otros clientes.

**Componentes Clave:**

- **Resumen de Calificaciones:**
  - Mostrar la calificaci√≥n media general y el n√∫mero total de rese√±as.
- **Herramientas de Filtrado:**
  - Dropdown para filtrar las valoraciones por servicio espec√≠fico.
  - Dropdown para filtrar las valoraciones por empleado.
- **Listado de Rese√±as:**
  - Lista paginada de todas las rese√±as aprobadas.
  - Cada rese√±a mostrar√°: nombre del cliente (ej: "Juan G."), calificaci√≥n en estrellas, servicio recibido, t√©cnico que lo atendi√≥, fecha y el texto completo del comentario.

**Datos Requeridos (API):**

- `GET /api/reviews?approved=true` (con soporte para paginaci√≥n y filtros: `&serviceId=[ID]`, `&employeeId=[ID]`).

### P√°gina de Tarjetas Regalo (`/gift-cards`)

**Prop√≥sito:** Crear una nueva l√≠nea de ingresos permitiendo a los usuarios regalar servicios.

**Componentes Clave:**

- **Secci√≥n Explicativa:**
  - T√≠tulo atractivo (ej: "El Regalo Perfecto").
  - Descripci√≥n del proceso en 3 pasos: 1. Elige el servicio, 2. Personaliza el regalo, 3. Paga y env√≠a.
- **Formulario de Compra:**
  - Selecci√≥n del servicio a regalar.
  - Campos para: Nombre del destinatario, Email del destinatario (opcional, se puede enviar al comprador), Nombre del remitente, Mensaje personalizado.
- **Proceso de Pago:**
  - Integraci√≥n con Stripe para el pago. Al completarse, el backend genera un c√≥digo de regalo √∫nico y env√≠a un email con la tarjeta regalo digital.

**Datos Requeridos (API):**

- `GET /api/services?giftable=true`
- `POST /api/gift-cards`



// ====== [32] docs/features/03-booking-flow.md ======
<!-- File: /docs/features/03-booking-flow.md - v1.0 -->

# 3. Flujo de Reserva del Cliente

## 3.1. Objetivo

Dise√±ar un proceso de reserva online que sea intuitivo, r√°pido y sin fricciones. El objetivo es guiar al usuario desde la selecci√≥n del servicio hasta la confirmaci√≥n de la cita en el menor n√∫mero de pasos posible, minimizando la tasa de abandono y maximizando las conversiones. La experiencia debe ser excelente en cualquier dispositivo.

## 3.2. Puntos de Entrada al Flujo

Un usuario puede iniciar el proceso de reserva desde m√∫ltiples puntos en la web:

- Bot√≥n "Reservar Cita Ahora" en la p√°gina de Inicio.
- Bot√≥n "Reservar este Servicio" en la p√°gina de Servicios (con el servicio ya pre-seleccionado).
- Bot√≥n "Ver Disponibilidad de [Nombre]" en la p√°gina de Nuestro Equipo (con el empleado ya pre-seleccionado).

## 3.3. Desglose del Proceso por Pasos

El flujo se presentar√° como un asistente multi-paso, preferiblemente dentro de un modal o en una √∫nica p√°gina (`/booking`) para mantener el contexto. Se utilizar√° un gestor de estado global (Zustand) para mantener la informaci√≥n de la reserva a trav√©s de los pasos.

### Paso 1: Selecci√≥n de Servicio(s)

**UI/UX:**

- Se muestra una lista de todos los servicios principales. El usuario debe seleccionar uno.
- A continuaci√≥n, se muestra una lista de "Servicios Adicionales" (add-ons) que el usuario puede a√±adir opcionalmente (checkboxes).
- Un panel de resumen, visible durante todo el proceso, se actualiza en tiempo real mostrando:
  - Servicios seleccionados.
  - **Duraci√≥n total estimada** (calculada sumando la duraci√≥n de todos los servicios).
  - **Coste total estimado.**
- Un bot√≥n "Siguiente" se activa una vez se ha seleccionado al menos un servicio principal.

**L√≥gica de Negocio:**

- El sistema debe sumar correctamente la duraci√≥n de todos los servicios seleccionados. Este valor (`totalDuration`) es cr√≠tico para el siguiente paso.

**API Calls:**

- `GET /api/services` para obtener la lista de servicios, sus duraciones y precios.

### Paso 2: Selecci√≥n de Empleado y Fecha/Hora

**UI/UX:**

- **Selecci√≥n de Empleado:**
  - Un dropdown/selector permite al usuario elegir un empleado espec√≠fico o mantener la opci√≥n por defecto: "Cualquier Empleado".
  - Si el flujo se inici√≥ desde la p√°gina de un empleado, este ya vendr√° pre-seleccionado.
- **Selecci√≥n de Fecha:**
  - Se muestra un componente de calendario (`@mantine/dates`). Los d√≠as sin disponibilidad (ej: domingos, festivos) aparecen deshabilitados.
- **Selecci√≥n de Hora:**
  - Al seleccionar una fecha en el calendario, se realiza una llamada a la API para obtener los huecos disponibles.
  - Se muestra una cuadr√≠cula con los "slots" de tiempo disponibles (ej: 09:00, 09:45, 11:15).
  - Los slots no disponibles o que no tienen suficiente duraci√≥n para el servicio seleccionado aparecer√°n deshabilitados o no se mostrar√°n.
  - El usuario selecciona un slot.
- El bot√≥n "Siguiente" se activa una vez se ha seleccionado una fecha y una hora.

**L√≥gica de Negocio:**

- **Estado: Implementado.** La API de disponibilidad es el cerebro del sistema. Calcula los huecos bas√°ndose en una doble comprobaci√≥n: el horario general del negocio (configurable) y el horario espec√≠fico de los empleados disponibles, restando adem√°s las citas ya existentes. La `totalDuration` del servicio solicitado es un par√°metro clave en este c√°lculo.

**API Calls:**

- ‚úÖ `GET /api/availability?date=[YYYY-MM-DD]&duration=[MINUTES]&employeeId=[ID_OPCIONAL]`

### Paso 3: Informaci√≥n Personal y del Veh√≠culo

**UI/UX:**

- Un formulario (`@mantine/form`) solicita los datos del cliente.
- **Datos del Cliente:** Nombre, Apellido, Email, N√∫mero de Tel√©fono.
  - Si el usuario est√° logueado, estos campos se rellenan autom√°ticamente desde su perfil.
- **Datos del Veh√≠culo:** Marca, Modelo, Matr√≠cula (opcional), Tama√±o (Peque√±o, Mediano, Grande/SUV).
  - Si el usuario est√° logueado y tiene veh√≠culos guardados, puede seleccionarlos desde un dropdown.
- Un checkbox para aceptar los t√©rminos y condiciones del servicio.
- El bot√≥n "Siguiente" se activa cuando todos los campos obligatorios est√°n validados.

### Paso 4: Resumen y Confirmaci√≥n (Pago)

**UI/UX:**

- Se muestra un resumen completo y claro de toda la selecci√≥n:
  - **Servicios:** Listado y desglose de precios.
  - **Cita:** D√≠a, Hora y Empleado asignado.
  - **Tus Datos:** Nombre, email, tel√©fono.
  - **Tu Veh√≠culo:** Marca y modelo.
  - **Total a Pagar.**
- Se integra un componente de pago de **Stripe (Payment Element)** para que el usuario introduzca los datos de su tarjeta.
- El bot√≥n final, "Confirmar y Pagar", se activa una vez que el formulario de Stripe est√° completo.

**L√≥gica de Negocio:**

- El frontend se comunica con Stripe para crear un `PaymentIntent`.
- Al hacer clic en "Confirmar", se procesa el pago. Si el pago es exitoso, se procede a crear la reserva en la base de datos.

**API Calls:**

- `POST /api/payments/create-intent` (para iniciar el pago con Stripe).
- `POST /api/bookings` (se env√≠a toda la informaci√≥n de la reserva, incluido el `paymentIntentId` de Stripe, para crear la cita en la base de datos).

## 3.4. Flujo Post-Reserva

- **P√°gina de √âxito:**
  - Tras una reserva exitosa, el usuario es redirigido a una p√°gina de confirmaci√≥n (`/booking/success`).
  - Esta p√°gina muestra un mensaje de agradecimiento, resume los detalles de la cita y le indica al usuario que ha recibido un email de confirmaci√≥n.
- **Notificaciones Autom√°ticas:**
  - El backend dispara las notificaciones correspondientes: email de confirmaci√≥n al cliente y notificaci√≥n a la empresa.



// ====== [33] docs/features/04-customer-panel.md ======
<!-- File: /docs/features/04-customer-panel.md - v1.0 -->
# 4. Panel de Cliente

## 4.1. Objetivo

Crear un √°rea privada y segura donde los clientes registrados puedan gestionar su relaci√≥n con el negocio de forma aut√≥noma. El panel debe proporcionar un valor a√±adido que fomente el registro y la fidelizaci√≥n, ofreciendo conveniencia, control y acceso a su historial y beneficios.

## 4.2. Desglose de Secciones del Panel

El panel de cliente estar√° disponible en la ruta `/dashboard` y sub-rutas, y ser√° accesible solo para usuarios autenticados.

### Secci√≥n: Mis Citas (`/dashboard/appointments`)

**Prop√≥sito:** El centro de operaciones del cliente. Proporciona una visi√≥n completa de su historial y sus pr√≥ximas citas.

**Componentes Clave:**

- **Pesta√±as de Navegaci√≥n:** "Pr√≥ximas Citas" y "Historial de Citas".
- **Vista "Pr√≥ximas Citas":**
  - Listado de citas pendientes.
  - Cada cita mostrar√°: Fecha, Hora, Servicio(s), Empleado asignado, Precio.
  - **Acciones por Cita:**
    - **Cancelar Cita:** Bot√≥n para solicitar la cancelaci√≥n. Se aplican reglas de negocio (ej: no se puede cancelar con menos de 24h de antelaci√≥n). Un modal pedir√° confirmaci√≥n.
    - **Solicitar Cambio:** Bot√≥n que abre un modal donde el cliente puede sugerir una nueva fecha/hora. Esto enviar√° una notificaci√≥n al administrador para su aprobaci√≥n manual.
    - **A√±adir al Calendario:** Opci√≥n para descargar un archivo `.ics`.
- **Vista "Historial de Citas":**
  - Listado de citas completadas.
  - Cada cita mostrar√° la misma informaci√≥n que las pr√≥ximas.
  - **Acciones por Cita:**
    - **Reservar de Nuevo:** Bot√≥n que inicia el flujo de reserva con el mismo servicio, veh√≠culo y (si est√° disponible) empleado ya pre-seleccionados.
    - **Dejar Valoraci√≥n:** Si la cita es reciente y a√∫n no ha sido valorada, se mostrar√° un bot√≥n para escribir una rese√±a.
    - **Ver Factura:** (Opcional, futuro) Enlace para ver/descargar la factura del servicio.

**API Calls:**

- `GET /api/me/appointments?status=upcoming`
- `GET /api/me/appointments?status=completed`
- `POST /api/me/appointments/[id]/cancel`
- `POST /api/me/appointments/[id]/reschedule-request`

### Secci√≥n: Mis Veh√≠culos (`/dashboard/vehicles`)

**Prop√≥sito:** Agilizar el proceso de reserva permitiendo al cliente guardar y gestionar la informaci√≥n de sus coches.

**Componentes Clave:**

- **Listado de Veh√≠culos Guardados:**
  - Una vista de "tarjetas" con cada veh√≠culo.
  - Cada tarjeta mostrar√°: Alias (ej: "Mi Coche"), Marca, Modelo y Tama√±o.
- **Acciones:**
  - **A√±adir Nuevo Veh√≠culo:** Bot√≥n que abre un formulario modal para introducir los datos de un nuevo coche.
  - **Editar/Eliminar:** Opciones en cada tarjeta para modificar los datos o eliminar el veh√≠culo del perfil.

**API Calls:**

- `GET /api/me/vehicles`
- `POST /api/me/vehicles`
- `PUT /api/me/vehicles/[id]`
- `DELETE /api/me/vehicles/[id]`

### Secci√≥n: Mis Bonos y Beneficios (`/dashboard/benefits`)

**Prop√≥sito:** Dar visibilidad sobre los programas de fidelizaci√≥n y los productos comprados, incentivando su uso.

**Componentes Clave:**

- **Secci√≥n de Bonos:**
  - Si el cliente ha comprado bonos (ej: "Bono 5 Lavados Premium"), se listar√°n aqu√≠.
  - Cada bono mostrar√°: Nombre del bono, Servicios restantes (ej: "3 de 5 restantes"), Fecha de caducidad (si aplica).
- **Secci√≥n de Puntos de Fidelizaci√≥n:**
  - Visualizaci√≥n de los puntos acumulados.
  - Informaci√≥n sobre c√≥mo canjear los puntos (ej: "500 puntos = 1 Lavado B√°sico Gratis").

**API Calls:**

- `GET /api/me/benefits`

### Secci√≥n: Mi Perfil (`/dashboard/profile`)

**Prop√≥sito:** Permitir al usuario mantener su informaci√≥n personal actualizada.

**Componentes Clave:**

- **Formulario de Datos Personales:**
  - Campos para editar: Nombre, Apellido, N√∫mero de Tel√©fono.
  - El email se mostrar√° pero no ser√° editable por ser el identificador principal de la cuenta.
- **Formulario de Cambio de Contrase√±a:**
  - Campos para: Contrase√±a Actual, Nueva Contrase√±a, Confirmar Nueva Contrase√±a.
  - (Este formulario solo ser√° visible para usuarios registrados con email/contrase√±a, no para los de OAuth).
- **Gesti√≥n de Notificaciones:**
  - Checkboxes para que el usuario elija sus preferencias (ej: "Recibir recordatorios por WhatsApp", "Recibir ofertas por email").

**API Calls:**

- `PUT /api/me/profile`
- `POST /api/me/change-password`




// ====== [34] docs/features/05-admin-panel-core-management.md ======
<!-- File: /docs/features/05-admin-panel-core-management.md - v1.0 -->

# 5. Panel de Administraci√≥n: Gesti√≥n de la Configuraci√≥n Base

## 5.1. Objetivo

Proporcionar al administrador del negocio un control total sobre las entidades fundamentales de la plataforma. Esta secci√≥n se centra en la configuraci√≥n "maestra" que raramente cambia en el d√≠a a d√≠a, pero que define c√≥mo opera el negocio: qu√© servicios se ofrecen, qui√©n trabaja, cu√°ndo trabajan y qui√©nes son los clientes.

## 5.2. Desglose de Secciones

Estas secciones estar√°n bajo la ruta `/admin` y requerir√°n un rol de "Administrador".

### Secci√≥n: Gesti√≥n de Servicios (`/admin/services`)

**Estado: Implementado (Backend y Frontend).** La API RESTful para el CRUD de servicios y la interfaz de usuario en el panel de administraci√≥n ya est√°n funcionales.

**Prop√≥sito:** Un CRUD (Crear, Leer, Actualizar, Eliminar) completo para el cat√°logo de servicios.

**Componentes Clave:**

- **Vista de Listado:**
  - Una tabla (`Mantine Data Table`) que lista todos los servicios.
  - Columnas: Nombre, Categor√≠a, Duraci√≥n (en minutos), Precio Base.
  - Acciones por fila: "Editar", "Eliminar" (con modal de confirmaci√≥n).
  - Un bot√≥n principal: "A√±adir Nuevo Servicio".
- **Formulario de Creaci√≥n/Edici√≥n (en un Modal o p√°gina dedicada):**
  - **Nombre del Servicio:** Campo de texto.
  - **Descripci√≥n:** Editor de texto enriquecido para detalles completos.
  - **Duraci√≥n:** Campo num√©rico en minutos. Este valor es **cr√≠tico** para el sistema de reservas.
  - **Precios:** Una tabla din√°mica para establecer diferentes precios por tama√±o de veh√≠culo (ej: Peque√±o, Mediano, Grande/SUV).
  - **Categor√≠a:** Selector (ej: Lavado Exterior, Limpieza Interior, Detallado).
  - **Opciones (Checkboxes):**
    - "¬øEs un servicio adicional (add-on)?": Si se marca, no aparecer√° como servicio principal en el flujo de reserva.
    - "¬øSe puede regalar?": Para que aparezca en la secci√≥n de Tarjetas Regalo.
    - "¬øDestacado en la Homepage?": Para mostrarlo en la p√°gina de inicio.
  - **Subida de Im√°genes:** Interfaz para subir fotos del "antes y despu√©s".

**API Calls:**

- ‚úÖ `GET /api/services`
- ‚úÖ `POST /api/services`
- ‚úÖ `PUT /api/services/[id]`
- ‚úÖ `DELETE /api/services/[id]`

### Secci√≥n: Gesti√≥n de Empleados y Horarios (`/admin/employees`)

**Estado: Implementado (Backend y Frontend).** La API RESTful para el CRUD de empleados y la interfaz de usuario en el panel de administraci√≥n ya est√°n funcionales. La gesti√≥n detallada de horarios por empleado se har√° en una fase posterior.

**Prop√≥sito:** Gestionar los perfiles del personal y, fundamentalmente, sus horarios de trabajo, que son la base del sistema de disponibilidad.

**Componentes Clave:**

- **Vista de Listado:**
  - Tarjetas de perfil para cada empleado con su foto, nombre y rol.
  - Acciones: "Editar Perfil y Horario".
  - Un bot√≥n principal: "A√±adir Nuevo Empleado".
- **Formulario de Creaci√≥n/Edici√≥n:**
  - **Datos del Perfil:**
    - Nombre y Apellido.
    - Email (ser√° su usuario para acceder al panel si tiene rol de empleado).
    - Rol del Sistema: Dropdown para seleccionar "Administrador" o "Empleado".
    - Biograf√≠a P√∫blica: Campo de texto para la p√°gina `/team`.
    - Subida de foto de perfil.
  - **Configuraci√≥n de Horario Semanal:**
    - Una interfaz visual para los 7 d√≠as de la semana.
    - Para cada d√≠a, el administrador podr√°:
      - Marcarlo como "D√≠a Libre".
      - Definir uno o varios turnos de trabajo (ej: Lunes de 09:00 a 13:00 y de 15:00 a 19:00). Esto permite configurar pausas para el almuerzo.
  - **Gesti√≥n de Vacaciones/Ausencias:**
    - Un calendario para a√±adir bloqueos de d√≠as completos (ej: "Vacaciones del 1 al 15 de Agosto"). Estos d√≠as anular√°n el horario semanal y el empleado no tendr√° disponibilidad.

**API Calls:**

- ‚úÖ `GET /api/employees`
- ‚úÖ `POST /api/employees`
- ‚úÖ `PUT /api/employees/[id]`
- ‚úÖ `DELETE /api/employees/[id]`

### Secci√≥n: Configuraci√≥n del Negocio (`/admin/settings`)

**Estado: Parcialmente Implementado (Backend y Base de Datos).** La estructura de la base de datos para almacenar el horario semanal del negocio ya est√° creada (`BusinessSettings`). La API de disponibilidad (`/api/availability`) ya lee y utiliza esta configuraci√≥n. La interfaz de usuario para que el administrador modifique estos horarios est√° pendiente de desarrollo.

**Prop√≥sito:** Un panel centralizado para gestionar las configuraciones globales del negocio, empezando por la m√°s cr√≠tica: el horario de apertura.

**Componentes Clave (Futuro):**

- **Formulario de Horario Semanal:**
  - Una interfaz visual con una fila para cada d√≠a de la semana (Lunes a Domingo).
  - Para cada d√≠a, el administrador podr√°:
    - Activar/Desactivar el d√≠a con un checkbox ("Cerrado").
    - Seleccionar la hora de apertura (ej: `09:00`).
    - Seleccionar la hora de cierre (ej: `19:00`).
  - Un bot√≥n de "Guardar Cambios" que actualizar√° la configuraci√≥n en la base de datos.

**API Calls (Futuro):**

- `GET /api/admin/settings`: Para obtener la configuraci√≥n actual y poblar el formulario.
- `PUT /api/admin/settings`: Para guardar los cambios realizados en el horario.

### Secci√≥n: Gesti√≥n de Clientes (`/admin/clients`)

**Prop√≥sito:** Un CRM (Customer Relationship Management) simple para tener una visi√≥n 360 de cada cliente.

**Componentes Clave:**

- **Vista de Listado:**
  - Una tabla paginada, con capacidad de b√∫squeda y ordenaci√≥n.
  - Columnas: Nombre, Email, Tel√©fono, Fecha de Registro, N¬∫ de Citas Totales.
  - Acci√≥n por fila: "Ver Detalles".
- **Vista de Detalles del Cliente (`/admin/clients/[id]`):**
  - **Informaci√≥n de Contacto:** Todos los datos del perfil del cliente.
  - **Historial de Citas:** Un listado completo de todas sus citas (pasadas y futuras).
  - **Veh√≠culos Registrados:** Listado de los coches guardados por el cliente.
  - **Notas Internas:** Un campo de texto **crucial** donde el administrador puede a√±adir comentarios privados sobre el cliente (ej: "Cliente VIP, ofrecer siempre una botella de agua", "Sensible a los ambientadores fuertes", "Llam√≥ para quejarse el 15/03").

**API Calls:**

- `GET /api/admin/clients` (con soporte para b√∫squeda, paginaci√≥n y ordenaci√≥n).
- `GET /api/admin/clients/[id]`
- `POST /api/admin/clients/[id]/notes`



// ====== [35] docs/features/06-admin-panel-operations.md ======
<!-- File: /docs/features/06-admin-panel-operations.md - v1.0 -->
# 6. Panel de Administraci√≥n: Operaciones Diarias

## 6.1. Objetivo

Equipar al administrador con las herramientas interactivas necesarias para la gesti√≥n del d√≠a a d√≠a del lavadero. Esta secci√≥n se enfoca en la visualizaci√≥n de la actividad, la manipulaci√≥n de la agenda y el seguimiento de cada cita de forma individual. Es el centro neur√°lgico para las operaciones en tiempo real.

## 6.2. Desglose de Secciones

### Secci√≥n: Dashboard de Anal√≠ticas (`/admin/dashboard`)

**Prop√≥sito:** La p√°gina de inicio del panel de administraci√≥n. Debe proporcionar una instant√°nea clara y r√°pida de la salud y la actividad del negocio.

**Componentes Clave:**

- **Tarjetas de KPIs (Indicadores Clave de Rendimiento):**
  - **Citas para Hoy:** N√∫mero total de citas programadas para el d√≠a actual.
  - **Ingresos del D√≠a:** Suma de los precios de las citas de hoy.
  - **Ocupaci√≥n Semanal:** Porcentaje de horas reservadas frente a horas disponibles para la semana en curso.
  - **Nuevos Clientes (Mes):** N√∫mero de clientes que se han registrado este mes.
- **Gr√°ficos Visuales (`Chart.js`):**
  - **Reservas por D√≠a:** Un gr√°fico de barras mostrando el n√∫mero de citas para cada d√≠a de la √∫ltima semana.
  - **Servicios M√°s Populares:** Un gr√°fico de tarta o de barras mostrando el top 5 de servicios m√°s reservados en los √∫ltimos 30 d√≠as.
- **Actividad Reciente:**
  - Un listado de las 5-10 pr√≥ximas citas del d√≠a.
  - Un feed de las √∫ltimas acciones importantes (ej: "Juan P√©rez ha cancelado su cita", "Nuevo cliente registrado: Mar√≠a L√≥pez").

**API Calls:**

- `GET /api/admin/dashboard/kpis`
- `GET /api/admin/dashboard/charts`
- `GET /api/admin/dashboard/activity`

### Secci√≥n: Planning Visual (Calendario) (`/admin/planning`)

**Prop√≥sito:** La herramienta m√°s importante para la gesti√≥n de la agenda. Debe permitir una visualizaci√≥n clara de la carga de trabajo y una manipulaci√≥n r√°pida de las citas.

**Componentes Clave:**

- **Integraci√≥n de `FullCalendar`:**
  - **Vista Semanal por Empleado (Resource Timeline):** La vista por defecto. Muestra los d√≠as de la semana en el eje X y los empleados como "recursos" en el eje Y. Las citas aparecen como bloques en la fila del empleado correspondiente.
  - **Otras Vistas:** Botones para cambiar a vista de D√≠a o Mes.
  - **Navegaci√≥n:** Flechas para avanzar y retroceder por semanas/d√≠as.
- **Interactividad:**
  - **Crear Cita Manualmente:** Al hacer clic en un hueco vac√≠o del calendario, se abrir√° un modal para crear una nueva cita (ideal para reservas telef√≥nicas).
  - **Ver/Editar Cita:** Al hacer clic en una cita existente, se abrir√° un panel lateral (Drawer) o modal con todos los detalles, permitiendo su edici√≥n.
  - **Arrastrar y Soltar (Drag & Drop):**
    - **Reagendar:** Arrastrar una cita a otra hora o d√≠a para cambiar su fecha.
    - **Reasignar:** Arrastrar una cita de la fila de un empleado a la de otro para cambiar la asignaci√≥n.
- **C√≥digo de Colores:** Las citas pueden tener colores diferentes seg√∫n su estado (ej: Azul para confirmadas, Verde para completadas, Gris para canceladas).

**API Calls:**

- `GET /api/admin/appointments?start=[DATE]&end=[DATE]` (FullCalendar llama a esta API para obtener los eventos).
- `POST /api/admin/appointments` (para crear citas manualmente).
- `PUT /api/admin/appointments/[id]` (se llama a esta API al soltar una cita despu√©s de arrastrarla).

### Secci√≥n: Gesti√≥n de Citas (`/admin/appointments`)

**Prop√≥sito:** Proporcionar una vista de tabla detallada de todas las citas, con potentes herramientas de b√∫squeda y filtrado para encontrar y gestionar cualquier reserva espec√≠fica.

**Componentes Clave:**

- **Tabla de Datos Avanzada (`Mantine Data Table`):**
  - **B√∫squeda Global:** Un campo de b√∫squeda para encontrar citas por nombre del cliente, email, tel√©fono o servicio.
  - **Filtros Avanzados:** Dropdowns para filtrar por:
    - Rango de Fechas.
    - Empleado.
    - Estado de la Cita (Confirmada, Completada, Cancelada, Pendiente de Pago, etc.).
- **Columnas de la Tabla:**
  - ID de Cita, Cliente, Servicio(s), Fecha y Hora, Empleado, Duraci√≥n, Precio, Estado.
- **Acciones por Fila:**
  - **Ver Detalles:** Abre el mismo panel/modal que desde el calendario.
  - **Cambiar Estado:** Un dropdown para cambiar r√°pidamente el estado de una cita (ej: marcar como "Completada" al finalizar el servicio).
  - **Reenviar Email de Confirmaci√≥n:** Un bot√≥n para volver a enviar la notificaci√≥n al cliente.
  - **Gestionar Pago:** Ver el estado del pago de Stripe y realizar acciones (ej: registrar un pago en efectivo si fuera el caso).

**API Calls:**

- `GET /api/admin/appointments` (con todos los par√°metros de b√∫squeda y filtrado).
- `PUT /api/admin/appointments/[id]/status`




// ====== [36] docs/features/07-reviews-system.md ======
<!-- File: /docs/features/07-reviews-system.md - v1.0 -->
````markdown
# 7. Sistema de Valoraciones y Rese√±as

## 7.1. Objetivo

Implementar un ciclo de feedback completo que permita recopilar valoraciones de los clientes de forma automatizada y utilizar esas rese√±as como una potente herramienta de marketing y prueba social. El sistema debe dar al administrador control total sobre qu√© valoraciones se muestran p√∫blicamente.

## 7.2. Flujo del Cliente para Dejar una Valoraci√≥n

El proceso est√° dise√±ado para ser lo m√°s simple y proactivo posible, maximizando la tasa de respuesta.

1.  **Disparador (Trigger):** Un administrador cambia el estado de una cita a "Completada" en el panel de administraci√≥n.
2.  **Espera Programada:** El sistema espera un tiempo configurable (ej: 3 horas) para dar tiempo al cliente a disfrutar del resultado antes de pedirle una opini√≥n.
3.  **Notificaci√≥n Autom√°tica:** Pasado el tiempo de espera, se env√≠a un email y/o un mensaje de WhatsApp al cliente.
    - El mensaje agradece su visita.
    - Incluye una llamada a la acci√≥n clara, como "Valora tu experiencia en 1 minuto".
    - Proporciona dos enlaces:
      - **Enlace principal:** Un link seguro, √∫nico y de un solo uso que dirige a la p√°gina de valoraci√≥n del propio sitio web.
      - **Enlace secundario (opcional):** Un enlace directo para dejar una rese√±a en el perfil de Google Business de la empresa.
4.  **P√°gina de Valoraci√≥n:**
    - Al hacer clic en el enlace principal, el usuario llega a una p√°gina simple y sin distracciones.
    - La p√°gina ya sabe de qu√© cita se trata gracias al token en la URL.
    - **Formulario:**
      - **Calificaci√≥n General (Estrellas):** Un selector de 1 a 5 estrellas (obligatorio).
      - **Comentario:** Un √°rea de texto para que el cliente escriba su opini√≥n (opcional).
      - **Calificaci√≥n del Empleado (Opcional):** Si se desea, se puede a√±adir un segundo selector de estrellas para valorar espec√≠ficamente al t√©cnico que le atendi√≥.
    - **Env√≠o:** Al enviar, la valoraci√≥n se guarda en la base de datos con el estado inicial de **"Pendiente"**.

## 7.3. Panel de Moderaci√≥n para el Administrador (`/admin/reviews`)

**Prop√≥sito:** Dar al due√±o del negocio el control total sobre la reputaci√≥n online que se muestra en su propia web.

**Componentes Clave:**

- **Vista Principal:**
  - Una vista de "bandeja de entrada" con todas las valoraciones recibidas, ordenadas por fecha (las m√°s recientes primero).
  - Filtros para ver rese√±as por estado: "Pendientes", "Aprobadas", "Ocultas".
- **Tarjeta de Valoraci√≥n Individual:**
  - Cada valoraci√≥n pendiente se muestra claramente con toda su informaci√≥n:
    - Nombre del Cliente.
    - Servicio recibido.
    - Empleado que lo atendi√≥.
    - Fecha de la cita.
    - Calificaci√≥n en estrellas.
    - Texto completo del comentario.
- **Acciones de Moderaci√≥n:**
  - **Aprobar:** Cambia el estado a "Aprobada". La valoraci√≥n ser√° ahora visible en las secciones p√∫blicas de la web.
  - **Ocultar:** Cambia el estado a "Oculta". La valoraci√≥n se guarda para registros internos y anal√≠ticas, pero **no ser√° visible p√∫blicamente**. No se elimina.
  - **Destacar (Checkbox/Toggle):** Una opci√≥n adicional en las rese√±as aprobadas para marcarlas como "Destacadas" y que aparezcan en la p√°gina de inicio.

## 7.4. Modelo de Datos (Esquema Prisma)

```prisma
model Review {
  id            String      @id @default(cuid())
  rating        Int         // Calificaci√≥n de 1 a 5
  comment       String?     @db.Text
  status        ReviewStatus @default(PENDING) // PENDING, APPROVED, HIDDEN
  isFeatured    Boolean     @default(false)    // Para la homepage

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relaciones
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique // Cada cita solo puede tener una rese√±a

  user          User        @relation(fields: [userId], references: [id])
  userId        String

  employee      Employee    @relation(fields: [employeeId], references: [id])
  employeeId    String
}

enum ReviewStatus {
  PENDING
  APPROVED
  HIDDEN
}
```
````

## 7.5. Endpoints de la API

- `GET /api/reviews/request?token=[TOKEN]`: Valida el token de un solo uso y muestra la p√°gina/formulario para dejar la valoraci√≥n.
- `POST /api/reviews?token=[TOKEN]`: Endpoint para que el cliente env√≠e su valoraci√≥n. Valida el token antes de guardar los datos.
- `GET /api/reviews`: Endpoint p√∫blico que devuelve todas las rese√±as con estado "APROBADA" para las p√°ginas `/reviews` y la homepage. Permite filtrar por empleado y servicio.
- `GET /api/admin/reviews`: Endpoint protegido para que el administrador obtenga todas las rese√±as, incluyendo las pendientes y ocultas.
- `PUT /api/admin/reviews/[id]`: Endpoint protegido para que el administrador actualice el estado (`status`) o la propiedad `isFeatured` de una rese√±a.

```

```




// ====== [37] docs/features/08-marketing-monetization.md ======
<!-- File: /docs/features/08-marketing-monetization.md - v1.0 -->
````markdown
# 8. M√≥dulos de Marketing y Monetizaci√≥n

## 8.1. Objetivo

Crear un conjunto de herramientas integradas en la plataforma para diversificar las fuentes de ingresos, aumentar el valor de vida del cliente (LTV) y fomentar la lealtad a la marca. Estos m√≥dulos transforman la web de una simple herramienta de reservas a una plataforma de crecimiento para el negocio.

## 8.2. Desglose de M√≥dulos

### M√≥dulo 1: Gesti√≥n de Bonos (Bundles)

**Prop√≥sito:** Incentivar la compra por adelantado de m√∫ltiples servicios a un precio reducido, asegurando ingresos y visitas futuras.

**Funcionalidad en el Panel de Administraci√≥n (`/admin/marketing/bonuses`):**

- **CRUD de Bonos:** Interfaz para crear, editar y desactivar ofertas de bonos.
- **Formulario de Creaci√≥n/Edici√≥n:**
  - **Nombre del Bono:** Ej: "Bono 5 Lavados Premium".
  - **Servicio Asociado:** Selecci√≥n de un √∫nico servicio del cat√°logo.
  - **Cantidad de Usos:** Ej: 5.
  - **Precio Total:** Precio con descuento por el paquete completo.
  - **Periodo de Validez (Opcional):** Ej: "V√°lido por 12 meses desde la compra".
  - **Estado:** Activo / Inactivo.

**Experiencia del Cliente:**

- Una secci√≥n en el sitio p√∫blico para comprar estos bonos.
- El pago se realiza a trav√©s de Stripe.
- En su "Panel de Cliente", el usuario puede ver sus bonos activos y los usos restantes.
- Durante el flujo de reserva, si el cliente elige un servicio para el que tiene un bono con usos disponibles, el sistema le ofrecer√° la opci√≥n de "Usar 1 cr√©dito del bono" en lugar de pagar.

**Modelo de Datos (Prisma):**

```prisma
// Definici√≥n del bono que se puede comprar
model BonusOffering {
  id          String   @id @default(cuid())
  name        String
  price       Float
  uses        Int
  validityDays Int?
  isActive    Boolean  @default(true)

  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   String
}

// Instancia de un bono comprado por un cliente
model PurchasedBonus {
  id              String   @id @default(cuid())
  usesRemaining   Int
  expiresAt       DateTime?

  user            User     @relation(fields: [userId], references: [id])
  userId          String

  bonusOffering   BonusOffering @relation(fields: [bonusOfferingId], references: [id])
  bonusOfferingId String
}
```
````

### M√≥dulo 2: Tarjetas Regalo (Gift Cards)

**Prop√≥sito:** Abrir una nueva v√≠a de ingresos permitiendo que los servicios del lavadero sean regalados, ideal para ocasiones especiales.

**Funcionalidad en el Panel de Administraci√≥n:**

- No requiere gesti√≥n activa m√°s all√° de tener los servicios marcados como "regalables".
- Una secci√≥n para visualizar las tarjetas regalo vendidas y su estado (canjeada/no canjeada).

**Experiencia del Cliente (Comprador y Receptor):**

- P√°gina p√∫blica `/gift-cards` para la compra.
- El comprador elige un servicio, introduce los datos del destinatario y un mensaje personalizado.
- Tras el pago con Stripe, el sistema genera un **c√≥digo de regalo √∫nico**.
- Se env√≠a un email al destinatario (o al comprador) con un dise√±o de tarjeta regalo digital que incluye el c√≥digo.
- El receptor de la tarjeta puede canjear el c√≥digo durante el paso de pago del flujo de reserva, lo que aplicar√° un descuento del 100%.

**Modelo de Datos (Prisma):**

```prisma
model GiftCard {
  id            String    @id @default(cuid())
  code          String    @unique // C√≥digo alfanum√©rico √∫nico
  isRedeemed    Boolean   @default(false)
  redeemedAt    DateTime?
  recipientEmail String?
  message       String?   @db.Text

  // Relaciones
  service       Service   @relation(fields: [serviceId], references: [id])
  serviceId     String

  purchaseOrder Order     @relation(fields: [orderId], references: [id])
  orderId       String
}
```

### M√≥dulo 3: Suscripciones (Club de Lavado)

**Prop√≥sito:** Generar ingresos mensuales recurrentes y predecibles, creando una base de clientes de alta fidelidad.

**Funcionalidad en el Panel de Administraci√≥n (`/admin/marketing/subscriptions`):**

- **CRUD de Planes de Suscripci√≥n:**
  - **Nombre del Plan:** Ej: "Club AquaClean Oro".
  - **Precio Mensual:** Ej: 49.99‚Ç¨.
  - **Beneficios Incluidos:**
    - Una interfaz para definir cu√°ntos usos de qu√© servicios incluye al mes (ej: "2 Lavados Premium", "4 Lavados B√°sicos").
  - **Integraci√≥n con Stripe Products & Prices** para gestionar la facturaci√≥n recurrente.

**Experiencia del Cliente:**

- P√°gina p√∫blica `/club` para ver y suscribirse a los planes.
- El pago mensual es autom√°tico a trav√©s de Stripe.
- En su panel, el cliente ve su estado de suscripci√≥n y los servicios que puede usar ese mes.
- Al igual que con los bonos, al reservar un servicio incluido en su plan, puede canjearlo sin coste adicional.

### M√≥dulo 4: Programa de Fidelizaci√≥n (Puntos)

**Prop√≥sito:** Recompensar la recurrencia, incentivando a los clientes a volver para acumular beneficios.

**Funcionalidad en el Panel de Administraci√≥n (`/admin/marketing/loyalty`):**

- **Configuraci√≥n del Programa:**
  - Definir la regla de acumulaci√≥n (ej: "1‚Ç¨ gastado = 1 punto").
  - Definir las recompensas (ej: "500 puntos = 1 Lavado B√°sico Gratis").
- El sistema asignar√° los puntos autom√°ticamente despu√©s de cada cita completada.

**Experiencia del Cliente:**

- En su panel (`/dashboard/benefits`), el cliente ve su saldo de puntos.
- El cliente es notificado cuando alcanza los puntos necesarios para una recompensa.
- Se le proporciona un c√≥digo de descuento o una opci√≥n en el flujo de reserva para canjear su recompensa.

## 8.3. Endpoints de la API

- `GET /api/bonuses`: Devuelve los bonos disponibles para la compra.
- `POST /api/bonuses/purchase`: Inicia la compra de un bono.
- `POST /api/gift-cards/purchase`: Inicia la compra de una tarjeta regalo.
- `POST /api/bookings/redeem`: Endpoint para canjear bonos, tarjetas regalo o puntos durante la reserva.
- `GET /api/admin/marketing/...`: Endpoints protegidos para toda la gesti√≥n de estos m√≥dulos.

```

```




// ====== [38] docs/features/09-notifications-system.md ======
<!-- File: /docs/features/09-notifications-system.md - v1.0 -->
# 9. Sistema de Notificaciones

## 9.1. Objetivo

Establecer un sistema de comunicaci√≥n proactivo y automatizado para mantener informados tanto a los clientes como al personal del negocio en cada etapa clave del ciclo de vida de una cita. Los objetivos principales son: mejorar la experiencia del cliente, reducir dr√°sticamente la tasa de no presentaci√≥n (no-shows) y minimizar la carga de trabajo administrativo.

## 9.2. Stack Tecnol√≥gico

| Canal        | Tecnolog√≠a                 | Prop√≥sito                                                                                                                                                   |
| :----------- | :------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Email**    | **Nodemailer**             | Env√≠o de correos electr√≥nicos transaccionales robustos. Se utilizar√°n plantillas HTML (ej: `mjml` o `react-email`) para un dise√±o profesional y responsivo. |
| **WhatsApp** | **Twilio API (o similar)** | Env√≠o de mensajes de WhatsApp para notificaciones de alta prioridad como recordatorios y confirmaciones.                                                    |

## 9.3. Notificaciones para el Cliente

Estas notificaciones se env√≠an al cliente para guiarlo y mantenerlo informado.

| Evento Desencadenante                | Canal(es)       | Contenido Clave                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| :----------------------------------- | :-------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| **Registro de Nueva Cuenta**         | Email           | **Asunto:** "Confirma tu cuenta en AquaClean".<br>Contiene un enlace de verificaci√≥n √∫nico y de un solo uso para activar la cuenta.                                                                                                                                                                                                                                                                                                                                             |
| **Solicitud de Contrase√±a Olvidada** | Email           | **Asunto:** "Restablece tu contrase√±a de AquaClean".<br>Contiene un enlace seguro para que el usuario pueda establecer una nueva contrase√±a.                                                                                                                                                                                                                                                                                                                                    |
| **Reserva de Cita Exitosa**          | Email, WhatsApp | **Asunto (Email):** "Tu cita en AquaClean est√° confirmada para el [Fecha] a las [Hora]".<br> **Mensaje (WhatsApp):** "¬°Hola [Nombre]! üëã Tu cita en AquaClean para un [Servicio] el [Fecha] a las [Hora] est√° confirmada. ¬°Te esperamos!".<br>El email **debe** incluir un archivo adjunto `.ics` para que el cliente pueda a√±adir la cita a su calendario (Google, Apple, etc.) con un solo clic. Tambi√©n incluir√° un resumen completo: servicio, empleado, direcci√≥n y coste. |
| **Recordatorio de Cita (24h antes)** | Email, WhatsApp | **Asunto (Email):** "Recordatorio: Tu cita en AquaClean es ma√±ana".<br> **Mensaje (WhatsApp):** "¬°Recordatorio! Ma√±ana a las [Hora] tienes tu cita para un [Servicio] en AquaClean. Si necesitas cambiarla, cont√°ctanos. ¬°Nos vemos pronto!".<br>Incluye opciones para confirmar la asistencia o contactar para reagendar.                                                                                                                                                      |
| **Cancelaci√≥n de Cita**              | Email           | **Asunto:** "Tu cita en AquaClean ha sido cancelada".<br>Confirma que la cita para el [Fecha] ha sido cancelada correctamente. Si aplica, informa sobre la pol√≠tica de reembolso.                                                                                                                                                                                                                                                                                               |
| **Cita Marcada como "Completada"**   | Email, WhatsApp | **Asunto (Email):** "¬°Gracias por tu visita a AquaClean! ¬øQu√© tal ha ido?".<br> **Mensaje (WhatsApp):** "¬°Gracias por visitarnos, [Nombre]! Esperamos que tu coche haya quedado impecable ‚ú®. ¬øTe importar√≠a dejarnos tu opini√≥n en 1 minuto? [Enlace a la p√°gina de valoraci√≥n]".<br>Se env√≠a tras un lapso de tiempo configurable (ej: 3 horas). Contiene el enlace para dejar una rese√±a en la web y/o en Google.                                                            |

## 9.4. Notificaciones para la Empresa (Administrador)

Estas notificaciones se env√≠an al personal para mantenerlos al tanto de la actividad de los clientes en tiempo real.

| Evento Desencadenante             | Canal(es)       | Contenido Clave                                                                                                                                                                                                                                                                                                                                     |
| :-------------------------------- | :-------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Nueva Reserva Realizada**       | Email, WhatsApp | **Asunto (Email):** "Nueva Reserva: [Servicio] para el [Fecha] a las [Hora]".<br> **Mensaje (WhatsApp):** "üîî ¬°Nueva Reserva! Cliente: [Nombre Cliente]. Servicio: [Servicio]. D√≠a: [Fecha] a las [Hora]. Empleado: [Nombre Empleado]".<br>Proporciona todos los detalles de la nueva cita para una visi√≥n r√°pida sin necesidad de entrar al panel. |
| **Cliente Cancela una Cita**      | Email, WhatsApp | **Asunto (Email):** "Cancelaci√≥n de Cita: [Nombre Cliente] para el [Fecha]".<br> **Mensaje (WhatsApp):** "‚ö†Ô∏è Cancelaci√≥n. El cliente [Nombre Cliente] ha cancelado su cita para el [Fecha] a las [Hora]".<br>Permite al administrador reaccionar r√°pidamente y, si es necesario, contactar a otros clientes para ocupar el hueco.                   |
| **Cliente Solicita Cambiar Cita** | Email           | **Asunto:** "Solicitud de Cambio de Cita de [Nombre Cliente]".<br>Informa al administrador que un cliente ha solicitado un cambio y le dirige al panel de administraci√≥n para gestionar la petici√≥n.                                                                                                                                                |

## 9.5. Implementaci√≥n en el Backend

- Se crear√° un `NotificationService` centralizado en el backend.
- Este servicio ser√° invocado por otros servicios de la aplicaci√≥n (ej: `BookingService`, `AuthService`) cuando ocurran los eventos relevantes.
- El `NotificationService` contendr√° la l√≥gica para:
  1.  Seleccionar la plantilla de mensaje adecuada (para email o WhatsApp).
  2.  Rellenar la plantilla con los datos din√°micos (nombre del cliente, fecha de la cita, etc.).
  3.  Invocar al proveedor correspondiente (`Nodemailer` o `Twilio`) para realizar el env√≠o.
- Se implementar√° un sistema de colas (opcional pero recomendado para escalar) para procesar los env√≠os de notificaciones de forma as√≠ncrona, evitando que la aplicaci√≥n se ralentice mientras espera la respuesta de las APIs externas.




// ====== [39] docs/features/10-external-integrations.md ======
<!-- File: /docs/features/10-external-integrations.md - v1.0 -->
````markdown
# 10. Integraciones Externas

## 10.1. Objetivo

Integrar la plataforma con servicios de terceros l√≠deres en su sector para incorporar funcionalidades cr√≠ticas de forma robusta y segura. Esto nos permite centrarnos en el valor a√±adido de nuestra aplicaci√≥n mientras delegamos tareas complejas como el procesamiento de pagos y la sincronizaci√≥n de calendarios a APIs especializadas.

## 10.2. Pasarela de Pagos: Stripe

**Prop√≥sito:** Gestionar todas las transacciones monetarias de la plataforma, desde citas individuales hasta la compra de bonos y suscripciones recurrentes.

### Funcionalidades Clave

- **Procesamiento de Pagos √önicos:** Aceptar pagos con tarjeta de cr√©dito/d√©bito para reservas de citas y compra de tarjetas regalo.
- **Gesti√≥n de Suscripciones:** Automatizar los cobros mensuales para los clientes del "Club de Lavado" a trav√©s de **Stripe Billing**.
- **Seguridad y Cumplimiento PCI:** Delegar el manejo de la informaci√≥n sensible de las tarjetas a Stripe, asegurando el m√°ximo nivel de seguridad y cumplimiento normativo.
- **Portal de Cliente de Stripe (Opcional):** Permitir a los clientes suscritos gestionar sus m√©todos de pago y facturas directamente a trav√©s de un portal alojado por Stripe.

### Flujo de Implementaci√≥n

1.  **Configuraci√≥n:**

    - Se crear√°n cuentas de Producto y Precio en el dashboard de Stripe para cada servicio, bono y plan de suscripci√≥n.
    - Las claves de API (p√∫blica y secreta) de Stripe se configurar√°n en las variables de entorno del backend.

2.  **Flujo de Pago √önico (para Citas/Regalos):**

    - **Frontend:**
      - Se utilizar√° la librer√≠a `@stripe/react-stripe-js`.
      - Al llegar al paso de pago, el cliente solicitar√° un `client_secret` a nuestra API.
      - Se renderizar√° el componente `PaymentElement` de Stripe, que es un formulario de pago seguro y unificado.
    - **Backend:**
      - Se crear√° un endpoint `POST /api/payments/create-intent`.
      - Este endpoint calcular√° el importe total y crear√° un `PaymentIntent` en Stripe, devolviendo su `client_secret` al frontend.
    - **Confirmaci√≥n:**
      - Tras el env√≠o del formulario por parte del cliente, Stripe procesar√° el pago.
      - El backend escuchar√° los **Webhooks** de Stripe (evento `payment_intent.succeeded`) para confirmar el pago de forma fiable y, en ese momento, finalizar√° la creaci√≥n de la reserva en la base de datos.

3.  **Flujo de Suscripciones:**
    - Se utilizar√° Stripe Checkout o el Payment Element para la suscripci√≥n inicial.
    - El backend crear√° un `Customer` en Stripe para cada usuario que se suscriba.
    - Se crear√°n objetos `Subscription` en Stripe, que gestionar√°n los cobros recurrentes autom√°ticamente.
    - Los Webhooks (`invoice.paid`, `customer.subscription.deleted`, etc.) ser√°n esenciales para mantener el estado de la suscripci√≥n sincronizado en nuestra base de datos.

### Modelo de Datos (Prisma)

```prisma
model User {
  // ... campos existentes
  stripeCustomerId String? @unique // ID del cliente en Stripe
}

model Appointment {
  // ... campos existentes
  paymentIntentId String? @unique // ID del intento de pago de Stripe
  paymentStatus   PaymentStatus @default(PENDING)
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}
```
````

## 10.3. Sincronizaci√≥n de Calendario: Google Calendar

**Prop√≥sito:** Ofrecer una conexi√≥n opcional para el administrador que sincroniza la agenda de la plataforma con un Google Calendar de la empresa, mejorando la visibilidad y la gesti√≥n de la disponibilidad desde fuera de la aplicaci√≥n.

### Funcionalidades Clave

- **Sincronizaci√≥n de Citas (App -> Google Calendar):**
  - Cuando una cita se crea, reagenda o cancela en nuestra plataforma, el evento correspondiente se crea, actualiza o elimina autom√°ticamente en el Google Calendar del negocio.
- **Sincronizaci√≥n de Disponibilidad (Google Calendar -> App):**
  - Cuando el administrador crea un evento manual en su Google Calendar (ej: "Cita M√©dica", "Reuni√≥n"), el sistema de nuestra aplicaci√≥n lo detectar√° como un "bloqueo de tiempo".
  - Ese intervalo de tiempo se marcar√° como no disponible en el calculador de disponibilidad de la web, evitando que los clientes puedan reservar en ese hueco.

### Flujo de Implementaci√≥n

1.  **Autorizaci√≥n (OAuth 2.0):**

    - En el panel de administraci√≥n, habr√° una secci√≥n de "Integraciones".
    - El administrador har√° clic en "Conectar con Google Calendar".
    - Esto iniciar√° un flujo de consentimiento de OAuth 2.0 donde el administrador autoriza a nuestra aplicaci√≥n a gestionar su calendario.
    - El backend recibir√° y almacenar√° de forma segura las credenciales de OAuth (access token y refresh token) asociadas a la cuenta del negocio.

2.  **Creaci√≥n y Modificaci√≥n de Eventos:**

    - Cuando se crea una cita, el backend utilizar√° las credenciales guardadas para llamar a la API de Google Calendar y crear un nuevo evento.
    - La informaci√≥n del evento incluir√°: nombre del servicio, nombre del cliente y empleado asignado.
    - El `googleEventId` devuelto por la API se guardar√° en nuestro modelo `Appointment`.
    - Para actualizar o cancelar, se usar√° ese `googleEventId` guardado para modificar el evento correcto.

3.  **Lectura de Disponibilidad:**
    - Cuando el sistema calcula los huecos disponibles para un d√≠a, adem√°s de mirar las citas en nuestra propia base de datos, har√° una llamada a la API de Google (`freebusy`) para consultar los periodos de tiempo ocupados en el calendario del administrador.
    - Estos periodos ocupados se restar√°n de la disponibilidad total.

### Modelo de Datos (Prisma)

```prisma
model Appointment {
  // ... campos existentes
  googleEventId String? @unique // ID del evento en Google Calendar
}

// Modelo para guardar las credenciales de la empresa
model AccountSettings {
  id                    String @id @default(cuid())
  googleAccessToken     String? @db.Text
  googleRefreshToken    String? @db.Text
  googleTokenExpiryDate DateTime?
  // ... otras configuraciones del negocio
}
```




// ====== [40] package.json ======
{
  "name": "aquaclean-car-wash-monorepo",
  "version": "1.0.0",
  "private": true,
  "description": "Plataforma de gesti√≥n y reservas para AquaClean Car Wash",
  "author": "R3v180",
  "license": "UNLICENSED",
  "scripts": {
    "dev": "turbo run dev --parallel",
    "build": "turbo run build",
    "lint": "turbo run lint",
    "format": "prettier --write \"**/*.{ts,tsx,md,json}\""
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^7.10.0",
    "@typescript-eslint/parser": "^7.10.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.2",
    "prettier": "^3.2.5",
    "turbo": "^1.13.3",
    "typescript": "^5.4.5",
    "zod": "^3.23.8"
  },
  "packageManager": "pnpm@9.1.1"
}


// ====== [41] packages/config/eslint-preset.js ======
// File: /packages/config/eslint-preset.js - v1.0

module.exports = {
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'prettier',
  ],
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  env: {
    browser: true,
    node: true,
    es2021: true,
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
  rules: {
    // Reglas de TypeScript
    '@typescript-eslint/no-unused-vars': [
      'warn',
      { argsIgnorePattern: '^_', varsIgnorePattern: '^_' },
    ],
    '@typescript-eslint/no-explicit-any': 'warn',

    // Reglas de React
    'react/prop-types': 'off', // No necesitamos prop-types porque usamos TypeScript
    'react/react-in-jsx-scope': 'off', // No es necesario importar React en el scope con React 17+
    'react/jsx-uses-react': 'off',

    // Reglas generales de ESLint
    'no-console': ['warn', { allow: ['warn', 'error'] }],
  },
  ignorePatterns: [
    'node_modules/',
    'dist/',
    'build/',
    '.turbo/',
    'coverage/',
  ],
};


// ====== [42] packages/config/package.json ======
{
  "name": "@aquaclean/config",
  "version": "1.0.0",
  "private": true,
  "main": "index.js",
  "files": [
    "eslint-preset.js"
  ],
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^7.10.0",
    "@typescript-eslint/parser": "^7.10.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.2",
    "typescript": "^5.4.5"
  }
}


// ====== [43] packages/types/package.json ======
{
  "name": "@aquaclean/types",
  "version": "1.0.0",
  "private": true,
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    }
  },
  "scripts": {
    "build": "tsc",
    "dev": "tsc --watch",
    "lint": "eslint . --ext .ts"
  },
  "peerDependencies": {
    "zod": ">=3.0.0"
  },
  "devDependencies": {
    "typescript": "^5.4.5"
  }
}


// ====== [44] packages/types/src/employee.schema.ts ======
import { z } from 'zod';

// Esquema para la creaci√≥n de un nuevo empleado
export const createEmployeeSchema = z.object({
  name: z.string().min(1, { message: 'El nombre es requerido.' }).min(3, { message: 'El nombre debe tener al menos 3 caracteres.' }),

  email: z.string().min(1, { message: 'El email es requerido.' }).email({ message: 'El formato del email no es v√°lido.' }),

  role: z.enum(['ADMIN', 'EMPLOYEE']),

  bio: z.string().optional(),

  // --- L√çNEA CORREGIDA ---
  // Ahora permitimos una URL v√°lida O una cadena de texto vac√≠a.
  // El .optional() final se asegura de que si el campo no se env√≠a, tambi√©n sea v√°lido.
  imageUrl: z
    .string()
    .url({ message: 'La URL de la imagen no es v√°lida.' })
    .or(z.literal(''))
    .optional(),
  
  workSchedule: z.record(z.string(), z.unknown()).optional(),
});


// ====== [45] packages/types/src/index.ts ======
// File: /packages/types/src/index.ts (ACTUALIZADO)

// Exportamos los esquemas desde su nueva ubicaci√≥n local
export * from './service.schema';
export * from './employee.schema'; // <-- L√çNEA A√ëADIDA

// Exportamos las interfaces de tipos
export * from './service';

export interface User {
  id: string;
  name: string | null;
  email: string;
  emailVerified: Date | null;
  image: string | null;
  role: 'ADMIN' | 'CUSTOMER';
}


// ====== [46] packages/types/src/service.schema.ts ======
// File: /apps/server/src/schemas/service.schema.ts (SOLUCI√ìN FINAL Y CORRECTA)

import { z } from 'zod';

// Definimos el esquema de validaci√≥n para la creaci√≥n de un servicio.
export const createServiceSchema = z.object({
  name: z.string().min(1, { message: 'El nombre es requerido.' }).min(3, { message: 'El nombre debe tener al menos 3 caracteres.' }),

  description: z.string().min(1, { message: 'La descripci√≥n es requerida.' }).min(10, { message: 'La descripci√≥n debe tener al menos 10 caracteres.' }),

  // z.coerce.number() intenta convertir el valor a n√∫mero.
  // Si falla, Zod generar√° un error de tipo por defecto.
  // Las validaciones .int() y .positive() se aplican despu√©s.
  duration: z.coerce.number()
    .int({ message: 'La duraci√≥n debe ser un n√∫mero entero.' })
    .positive({ message: 'La duraci√≥n debe ser un n√∫mero positivo.' }),

  prices: z.record(z.string(), z.number()).refine(obj => Object.keys(obj).length > 0, {
    message: 'Se requiere al menos un precio.',
  }),
  
  category: z.string().min(1, { message: 'La categor√≠a es requerida.' }),

  isAddon: z.boolean().optional(),
  isGiftable: z.boolean().optional(),
  isFeatured: z.boolean().optional(),
});


// ====== [47] packages/types/src/service.ts ======
// File: /packages/types/src/service.ts

export interface Service {
  id: string;
  name: string;
  description: string;
  duration: number; // en minutos
  prices: Record<string, number>;
  category: string;
  isAddon: boolean;
  isGiftable: boolean;
  isFeatured: boolean;
}


// ====== [48] packages/types/tsconfig.json ======
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "dist",
    "declaration": true,
    "noEmit": false
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "dist"]
}


// ====== [49] tsconfig.base.json ======
// File: /tsconfig.base.json - v1.0
{
  "compilerOptions": {
    /* Base Options */
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "ESNext",
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleResolution": "bundler",
    "isolatedModules": true,

    /* Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitAny": true,

    /* Transpilation */
    "module": "ESNext",
    "jsx": "react-jsx",
    "noEmit": true,

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@aquaclean/types": ["packages/types/src"],
      "@aquaclean/config/*": ["packages/config/*"]
    }
  }
}


// ====== [50] tsconfig.json ======
// File: /tsconfig.json - v1.0
{
  "files": [],
  "references": [
    { "path": "apps/client" },
    { "path": "apps/server" },
    { "path": "packages/types" },
    { "path": "packages/config" }
  ]
}


// ====== [51] turbo.json ======
{
  "$schema": "./.schemas/turbo-schema-v1.json",
  "globalDependencies": ["tsconfig.base.json"],
  "pipeline": {
    "dev": {
      "cache": false,
      "persistent": true
    },
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**"]
    },
    "lint": {
      "outputs": []
    },
    "format": {
      "outputs": []
    }
  }
}

